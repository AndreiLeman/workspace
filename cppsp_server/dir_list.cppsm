<%#
//cppsp module to enable directory listing

#include <sys/stat.h>
#define TO_C_STR(in,inLen,out) char out[inLen+1];\
		memcpy(out,in,inLen);\
		out[inLen]=0;
DelegateChain<AsyncValue<Handler>(String)>::item* it;
Server* server;
String filePath;
AsyncValue<Handler> routeRequest(void*, String path) {
	struct stat st;
	string s=server->mapPath(path.toSTDString());
	if(::stat(s.c_str(),&st)>=0 && S_ISDIR(st.st_mode)) {
		//redirect to self
		return server->routeDynamicRequestFromFile(filePath);
	}
	return (*it->prev)(path);
}
extern "C" void initModule(ModuleParams& p) {
	server=p.server;
	filePath=p.filePath;
	it=server->routeRequest.attach(&routeRequest);
}
extern "C" void deinitModule() {
	server->routeRequest.detach(it);
}
%><%
string path=server->mapPath(request->path.toSTDString());
%>
<!DOCTYPE HTML>
<html>
<head>
	<title>Index of <% htmlEscape(request->path,output); %></title>
</head>
<body>
<h1 style="margin-top: 2px;">Index of <% htmlEscape(request->path,output); %></h1>
<table>
	<tr>
		<th>Name</th>
		<th>Last modified</th>
		<th>Size</th>
	</tr>
	<tr>
		<th colspan="5"><hr /></th>
	</tr>
	
<%
vector<string> list;
auto tmp=[&](const char* name) {
	list.push_back(name);
};
listDirectory(path.c_str(), &tmp);
std::sort(list.begin(),list.end());
for(int i=0;i<list.size();i++) {
	string name=list[i];
	struct stat st;
	char p[path.length()+name.length()+1];
	p[combinePathChroot(path.c_str(),name.c_str(),p)]=0;
	if(stat(p,&st)<0) continue;
	time_t rawtime=st.st_mtime;
	struct tm * timeinfo;
	char buffer[256];
	timeinfo = localtime (&rawtime);
	strftime(buffer,sizeof(buffer),"%F %r",timeinfo);
	%>
	<tr>
		<td>
			<a href="<% htmlAttributeEscape(name.c_str(),output); %><%if(S_ISDIR(st.st_mode)){%>/<%}%>">
				<% htmlEscape(name.c_str(),output); %><%if(S_ISDIR(st.st_mode)){%>/<%}%>
			</a>
		</td>
		<td align="right"><%=buffer%></td>
		<td align="right"><%=(int64_t)st.st_size%></td>
	</tr>
	<%
}
%>
</table>
</body>
</html>
