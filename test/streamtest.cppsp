<%!-lcryptopp%><%@ class p %><%#
#include <cryptopp/cryptlib.h>
#include <cryptopp/sha.h>
#include <cryptopp/filters.h>
#include <cryptopp/base64.h>
#include <cppsp/websocket.H>
using namespace CryptoPP;


%><%$
WebSocketParser wsp;
FrameWriter w;
void doInit() {
	if(ci_compare(request->headers["Connection"],"Upgrade")==0
		&& ci_compare(request->headers["Upgrade"],"websocket")==0) {
		//switch to websocket mode
		
		/*
		//initialize opcode table
		ws_ops={&p::ws_op_cont,&p::ws_op_text,&p::ws_op_binary,			//0
			&p::ws_op_unhandled,&p::ws_op_unhandled,&p::ws_op_unhandled,//3
			&p::ws_op_unhandled,&p::ws_op_unhandled,&p::ws_op_close,	//6
			&p::ws_op_ping,&p::ws_op_unhandled,&p::ws_op_unhandled,		//9
			&p::ws_op_unhandled,&p::ws_op_unhandled,&p::ws_op_unhandled,//12
			&p::ws_op_unhandled};										//15
		*/
		
		response->statusCode=101;
		response->statusName="Switching Protocols";
		response->headers["Connection"]="Upgrade";
		response->headers["Upgrade"]="WebSocket";
		//response->headers["Sec-WebSocket-Protocol"]="chat";
		String s=concat(*sp,request->headers["Sec-WebSocket-Key"],
			"258EAFA5-E914-47DA-95CA-C5AB0DC85B11");
		
		SHA1 sha1;
		byte tmp[sha1.DigestSize()];
		sha1.CalculateDigest(tmp, (const byte*)s.data(), s.length());
		
		string encoded;
		StringSource src(tmp, sizeof(tmp), true, new Base64Encoder(new StringSink(encoded), false));
		//printf("Sec-WebSocket-Accept: %s\n",encoded.c_str());
		response->headers["Sec-WebSocket-Accept"]=sp->addString(encoded);
		response->serializeHeaders(response->output);
		response->output.flush();
		response->outputStream->write(response->buffer, {&p::ws_headersWritten,this});
	} else Page::doInit();
}
void ws_headersWritten(int l) {
	w.output=response->outputStream;
	ws_readFrame();
}
void ws_readFrame() {
	request->inputStream->read(wsp.beginPutData(4096),{&p::ws_readFrame1,this});
}
void ws_readFrame1(int l) {
	//printf("read %i bytes from websocket socket\n",l);
	if(l<=0) {
		do_end(); return;
	}
	wsp.endPutData(l);
	WebSocketParser::WSFrame f;
	while(wsp.process(f)) {
		handleFrame(f);
	}
	wsp.reset();
	ws_readFrame();
}
//len must be known in advance
String ws_beginWriteFrame(FrameWriter& fw, int len) {
	int hdrlen=sizeof(WebSocketParser::ws_header1);
	if(len>125 && len<=0xFFFF) hdrlen+=sizeof(WebSocketParser::ws_header_extended16);
	if(len>0xFFFF) hdrlen+=sizeof(WebSocketParser::ws_header_extended64);
	String buf=fw.beginInsert(hdrlen+len);
	return buf.subString(hdrlen);
}
void ws_endWriteFrame(FrameWriter& fw, String buf, int opcode) {
	int hdrlen=sizeof(WebSocketParser::ws_header1);
	if(buf.length()>125 && buf.length()<=0xFFFF) hdrlen+=sizeof(WebSocketParser::ws_header_extended16);
	if(buf.length()>0xFFFF) hdrlen+=sizeof(WebSocketParser::ws_header_extended64);
	
	WebSocketParser::ws_header1* h1=((WebSocketParser::ws_header1*)(buf.data()-hdrlen));
	memset(h1,0,sizeof(*h1));
	h1->fin=true;
	h1->mask=false;
	h1->opcode=opcode;
	if(buf.length()>125 && buf.length()<=0xFFFF) {
		h1->payload_len=126;
		WebSocketParser::ws_header_extended16* h2=(WebSocketParser::ws_header_extended16*)(h1+1);
		h2->payload_len=(uint16_t)buf.length();
	} else if(buf.length()>0xFFFF) {
		h1->payload_len=127;
		WebSocketParser::ws_header_extended64* h2=(WebSocketParser::ws_header_extended64*)(h1+1);
		h2->payload_len=(uint64_t)buf.length();
	} else {
		h1->payload_len=(char)buf.length();
	}
	fw.endInsert(hdrlen+buf.length());
}
void handleFrame(WebSocketParser::WSFrame f) {
	//printf("websocket frame: opcode=%i fin=%i datalen=%i data:\n%s\n",f.opcode,f.fin?1:0,f.data.length(),f.data.toSTDString().c_str());
	String s=ws_beginWriteFrame(w,f.data.length());
	memcpy(s.data(),f.data.data(),f.data.length());
	ws_endWriteFrame(w,s,f.opcode);
	w.flush();
}
void do_end() {
	response->closed=true;
	finalize();
}


%>
<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>WebSocket Test</title>
		<script language="javascript" type="text/javascript">

		var wsUri = "ws://"+window.location.host+window.location.pathname;
		var output;
		function init()
		{
			output = document.getElementById("output");
			testWebSocket();
		}
		function testWebSocket()
		{
			websocket = new WebSocket(wsUri);
			websocket.onopen = function(evt) { onOpen(evt) };
			websocket.onclose = function(evt) { onClose(evt) };
			websocket.onmessage = function(evt) { onMessage(evt) };
			websocket.onerror = function(evt) { onError(evt) };
		}
		function onOpen(evt)
		{
			writeToScreen("CONNECTED");
			doSend("WebSocket rocks");
		}
		function onClose(evt)
		{
			writeToScreen("DISCONNECTED");
		}
		function onMessage(evt)
		{
			writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
			//websocket.close();
		}
		function onError(evt)
		{
			writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
		}
		function doSend(message)
		{
			writeToScreen("SENT: " + message); 
			websocket.send(message);
		}
		function writeToScreen(message)
		{
			var pre = document.createElement("p");
			pre.style.wordWrap = "break-word";
			pre.innerHTML = message;
			output.appendChild(pre);
		}
		window.addEventListener("load", init, false);
		</script>
	</head>
	<body>
		<h2>WebSocket Test</h2>
		<textarea id="txt"></textarea>
		<button type="button" onclick="doSend(document.getElementById('txt').value);">send</button>
		<div id="output"></div>
	</body>
</html> 
