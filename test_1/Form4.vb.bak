Public Class Form4
	Const buffersize As Integer = 4096 '* 4 ' * 4
	Dim WithEvents a As New wave_lib.WaveOut(8, buffersize)
	Dim WithEvents s As New _stream
	Dim bmp1 As New System.Drawing.Bitmap(321, 129, Imaging.PixelFormat.Format24bppRgb)
	'Dim bmp2 As New System.Drawing.Bitmap(300, 100, Imaging.PixelFormat.Format32bppArgb)
	'Dim a_bmp As System.Drawing.Bitmap = bmp
	Dim tmp1(2048 - 1) As Short
	'Dim tmp2(2048 - 1) As Short
	Dim bmp_lock As New Object
	'Dim a_tmp As Short() = tmp1
	'Dim x1, x2 As Integer
	'Dim ax As Integer = 5
	'Dim __a As Boolean = False
	Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
		'a.SetFormat(44100, 16, 1)
		'Dim t As Double = buffersize / a.format.nSamplesPerSec
		'Dim sc As Double = buffersize / bmp1.Width
		'Me.Timer1.Interval = buffersize / bmp1.Width / a.format.nSamplesPerSec * 1000
		a.Open()
	End Sub

	Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
		a.Close()
	End Sub

	Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
		a.Play()
		'Me.Timer1.Enabled = True
	End Sub

	Private Sub Button4_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button4.Click
		a.Stop()
	End Sub

	Private Sub Button5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button5.Click
		a.Pause()
	End Sub

	Private Sub Button6_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button6.Click
		a.Resume()
	End Sub

	Private Sub Button7_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button7.Click
		Me.OpenFileDialog1.ShowDialog()
	End Sub

	Private Sub OpenFileDialog1_FileOk(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles OpenFileDialog1.FileOk
		s.s = New IO.FileStream(Me.OpenFileDialog1.FileName, IO.FileMode.Open, IO.FileAccess.Read)
	End Sub
	Private Sub Panel1_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles Panel1.MouseDown, Panel1.MouseMove
		If Not e.Button = Windows.Forms.MouseButtons.Left Then Return
		a.src.Position = Math.Round(e.X * a.src.Length / Me.Panel1.Width / 8) * 8
		'Me.Panel1.Refresh()
	End Sub

	Private Sub Panel1_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Panel1.Paint
		If Not a.src Is Nothing Then
			Try
				Dim x As Integer = CInt(Math.Round((a.src.Position / 8) * Me.Panel1.Width / (a.src.Length / 8)))
				e.Graphics.FillRectangle(Brushes.Black, 0, 0, x, Me.Panel1.Height)
				e.Graphics.FillRectangle(Brushes.White, x, 0, Me.Panel1.Width - x, Me.Panel1.Height)
			Catch ex As Exception
				e.Graphics.Clear(Color.White)
			End Try
		Else
			e.Graphics.Clear(Color.White)
		End If
	End Sub

	Private Sub a_AfterPlayBuffer(ByVal data As wave_lib.WaveBuffer) Handles a.AfterPlayBuffer
		'Me.Panel1.Refresh()
		'Try
		'	Dim g As Graphics = Me.Panel1.CreateGraphics()
		'	Dim x As Integer = CInt(Math.Round((a.src.Position / 8) * Me.Panel1.Width / (a.src.Length / 8)))
		'	g.FillRectangle(Brushes.Black, 0, 0, x, Me.Panel1.Height)
		'	g.FillRectangle(Brushes.White, x, 0, Me.Panel1.Width - x, Me.Panel1.Height)
		'Catch ex As Exception

		'End Try
		'Me.Panel1.Invalidate()
		'data.to_array_16(CType(IIf(__a, tmp2, tmp1), Short()))
		data.to_array_16(tmp1)
		e.Set()
	End Sub
	Dim e As New Threading.EventWaitHandle(False, Threading.EventResetMode.AutoReset)
	Sub th1()
		Do
			e.WaitOne(System.Threading.Timeout.Infinite, True)
			'Dim s As Short() = CType(IIf(__a, tmp2, tmp1), Short())
			SyncLock bmp_lock
				'Dim _bmp1, _bmp2 As Bitmap
				'_bmp1 = IIf(__a, bmp2, bmp1)
				'_bmp2 = IIf(__a, bmp1, bmp2)
				'd(_bmp2, s)
				'ax = _bmp2.Width
				'__a = Not __a
				d(bmp1, tmp1)
			End SyncLock
			Me.Panel2.Refresh()
		Loop
	End Sub
	Private Sub a_BeforePlayBuffer(ByVal data As wave_lib.WaveBuffer) Handles a.BeforePlayBuffer
	End Sub
	Private Sub Button8_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button8.Click
		a.SetFormat(CInt(Me.TextBox2.Text), CInt(Me.TextBox4.Text), CInt(Me.TextBox1.Text))
	End Sub

	Public Sub New()

		' This call is required by the Windows Form Designer.
		InitializeComponent()

		' Add any initialization after the InitializeComponent() call.
		a.src = s
		Dim th As New Threading.Thread(AddressOf th1)
		th.Start()
	End Sub

	Private Sub s_position_chg() Handles s.position_chg
		Me.Panel1.Invalidate()
	End Sub
	Sub d(ByVal bmp As Bitmap, ByVal data As Short())
		Try
			Dim g As System.Drawing.Graphics = System.Drawing.Graphics.FromImage(bmp)
			Dim i As Integer
			Dim p As Drawing.Pen = Pens.GreenYellow
			'Dim tmp As Integer = Math.Min(data.Length - 2, Me.ClientSize.Width) / 0.1
			'Dim h As Integer = Me.ClientSize.Height
			'For i = 0 To tmp
			'	g.DrawLine(p, CInt(i * 0.1), CInt(data(i) * h / Short.MaxValue) + h2, CInt((i + 1) * 0.1), CInt(data(i + 1) * h / Short.MaxValue) + h2)
			'Next
			Dim sp As Integer = 0
			Dim b As Short() = data
			Dim _w As Integer = bmp.Width 'Me.ClientSize.Width	'200	'
			Dim _h As Integer = bmp.Height 'Me.ClientSize.Height - 85 '100	'
			Dim sc As Double = _w / data.Length	'0.025
			Dim e As Integer = CLng(sp + Math.Min(_w / sc, b.Length - 1))
			Dim ss As Integer = 0
			Dim se As Integer = 0
			Dim __h As Integer = _h / 2
			'Dim p As New Pen(Color.Green, 1)
			g.FillRectangle(Brushes.Black, 0, 0, _w, _h)
			Try
				Dim _step As Integer = CInt(IIf((1 / sc) / 2 < 1, 1, (1 / sc) / 2))
				For i = sp To e - _step Step _step
					Dim h As Integer
					Dim h2 As Integer

					h = CInt(_h / CInt(CInt(Short.MaxValue) - CInt(Short.MinValue)) * b(CInt(i))) + __h
					h2 = CInt(_h / CInt(CInt(Short.MaxValue) - CInt(Short.MinValue)) * b(CInt(i + _step))) + __h
					'  =  2550            / 255  * 5

					'If ((i > ss And i < se) Or (i < ss And i > se)) Or (i = ss And Not ss = se And ss < se) Or (i = se And Not ss = se And ss > se) Then
					'	Dim r As New Rectangle(CInt((i - sp) * sc), 0, CInt(sc + 0.7), Me.Size.Height)
					'	pe.Graphics.FillRectangle(New SolidBrush(Color.White), r)
					'	'r = New Rectangle(((i - sp) * sc) - sc, 0, sc, Me.Size.Height)
					'	'pe.Graphics.FillRectangle(New SolidBrush(Color.White), r)
					'	pe.Graphics.DrawLine(New Pen(Color.Black, 1), CInt((i - sp) * sc), Me.Size.Height - h, CInt(((i - sp) * sc) + sc), Me.Size.Height - h2)
					'Else
					''g.DrawLine(p, CInt((i - sp) * sc), _h - h, CInt(((i - sp) * sc) + sc), _h - h2)
					g.DrawLine(p, CInt((i - sp) * sc), _h - h, CInt(((i - sp) * sc) + IIf(CInt(sc) < 1, 1, CInt(sc))), _h - h2)
					'End If
					'If Not sc < 5 Then
					'	Dim r2 As Rectangle
					'	r2 = New Rectangle(CInt((i - sp) * sc), Me.Size.Height - h, 5, 5)
					'	pe.Graphics.DrawRectangle(New Pen(Color.Black, 1), r2)
					'	r2 = New Rectangle(CInt((i - sp) * sc - 1), Me.Size.Height - h - 1, 3, 3)
					'	pe.Graphics.FillRectangle(New SolidBrush(Color.White), r2)
					'End If

					'End If

				Next i
			Catch ex As Exception

			End Try
			g.Dispose()
		Catch ex As Exception

		End Try
	End Sub

	Private Sub Panel2_Paint(ByVal sender As System.Object, ByVal e As System.Windows.Forms.PaintEventArgs) Handles Panel2.Paint
		SyncLock bmp_lock
			'Dim _bmp1, _bmp2 As Bitmap
			'_bmp1 = IIf(__a, bmp2, bmp1)
			'_bmp2 = IIf(__a, bmp1, bmp2)
			'e.Graphics.DrawImageUnscaled(_bmp1, Me.Panel2.Width + ax - bmp1.Width, 0)
			'e.Graphics.DrawImageUnscaled(_bmp2, Me.Panel2.Width + ax - bmp1.Width - bmp2.Width, 0)
			e.Graphics.DrawImageUnscaled(bmp1, 0, 0)
		End SyncLock
	End Sub

	Private Sub Timer1_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer1.Tick
		'ax -= Me.Timer1.Interval / (buffersize / bmp1.Width / a.format.nAvgBytesPerSec * 1000)
		Me.Panel2.Refresh()
	End Sub

	Private Sub Form4_FormClosing(ByVal sender As Object, ByVal e As System.Windows.Forms.FormClosingEventArgs) Handles Me.FormClosing
		System.Diagnostics.Process.GetCurrentProcess().Kill()
	End Sub

	Private Sub Panel2_Resize(ByVal sender As Object, ByVal e As System.EventArgs) Handles Panel2.Resize
		SyncLock bmp_lock
			Try
				If Not bmp1 Is Nothing Then
					bmp1.Dispose()
					bmp1 = Nothing
				End If
				bmp1 = New System.Drawing.Bitmap(Me.Panel2.ClientSize.Width, Me.Panel2.ClientSize.Height, Imaging.PixelFormat.Format24bppRgb)
			Catch ex As Exception
			End Try
		End SyncLock
	End Sub
End Class
Public Class _stream
	Inherits IO.Stream
	Public s As IO.Stream
	Public Event position_chg()
	Dim ev As New Threading.EventWaitHandle(False, Threading.EventResetMode.AutoReset)
	Sub th1()
		Do
			ev.WaitOne(System.Threading.Timeout.Infinite, True)
			RaiseEvent position_chg()
		Loop
	End Sub
	Public Sub New()
		Dim th As New Threading.Thread(AddressOf th1)
		th.Priority = Threading.ThreadPriority.Lowest
		th.Start()
	End Sub
	Public Overrides ReadOnly Property CanRead() As Boolean
		Get
			Return s.CanRead
		End Get
	End Property

	Public Overrides ReadOnly Property CanSeek() As Boolean
		Get
			Return s.CanSeek
		End Get
	End Property

	Public Overrides ReadOnly Property CanWrite() As Boolean
		Get
			Return s.CanWrite
		End Get
	End Property

	Public Overrides Sub Flush()
		s.Flush()
	End Sub

	Public Overrides ReadOnly Property Length() As Long
		Get
			Return s.Length
		End Get
	End Property

	Public Overrides Property Position() As Long
		Get
			Return s.Position
		End Get
		Set(ByVal value As Long)
			s.Position = value
			'RaiseEvent position_chg()
			ev.Set()
		End Set
	End Property

	Public Overrides Function Read(ByVal buffer() As Byte, ByVal offset As Integer, ByVal count As Integer) As Integer
		Dim i As Integer = s.Read(buffer, offset, count)
		'RaiseEvent position_chg()
		ev.Set()
		Return i
	End Function

	Public Overrides Function Seek(ByVal offset As Long, ByVal origin As System.IO.SeekOrigin) As Long
		Dim i As Integer = s.Seek(offset, origin)
		'RaiseEvent position_chg()
		ev.Set()
		Return i
	End Function

	Public Overrides Sub SetLength(ByVal value As Long)
		s.SetLength(value)
	End Sub

	Public Overrides Sub Write(ByVal buffer() As Byte, ByVal offset As Integer, ByVal count As Integer)
		s.Write(buffer, offset, count)
		'RaiseEvent position_chg()
		ev.Set()
	End Sub
End Class