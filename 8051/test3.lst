                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Feb 26 2012) (Linux)
                              4 ; This file was generated Sat Dec  1 15:18:20 2012
                              5 ;--------------------------------------------------------
                              6 	.module test3
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _seg_position
                             13 	.globl _display_seg
                             14 	.globl _timer
                             15 	.globl _main
                             16 	.globl _display
                             17 	.globl _delay
                             18 	.globl _CY
                             19 	.globl _AC
                             20 	.globl _F0
                             21 	.globl _RS1
                             22 	.globl _RS0
                             23 	.globl _OV
                             24 	.globl _F1
                             25 	.globl _P
                             26 	.globl _PS
                             27 	.globl _PT1
                             28 	.globl _PX1
                             29 	.globl _PT0
                             30 	.globl _PX0
                             31 	.globl _RD
                             32 	.globl _WR
                             33 	.globl _T1
                             34 	.globl _T0
                             35 	.globl _INT1
                             36 	.globl _INT0
                             37 	.globl _TXD
                             38 	.globl _RXD
                             39 	.globl _P3_7
                             40 	.globl _P3_6
                             41 	.globl _P3_5
                             42 	.globl _P3_4
                             43 	.globl _P3_3
                             44 	.globl _P3_2
                             45 	.globl _P3_1
                             46 	.globl _P3_0
                             47 	.globl _EA
                             48 	.globl _ES
                             49 	.globl _ET1
                             50 	.globl _EX1
                             51 	.globl _ET0
                             52 	.globl _EX0
                             53 	.globl _P2_7
                             54 	.globl _P2_6
                             55 	.globl _P2_5
                             56 	.globl _P2_4
                             57 	.globl _P2_3
                             58 	.globl _P2_2
                             59 	.globl _P2_1
                             60 	.globl _P2_0
                             61 	.globl _SM0
                             62 	.globl _SM1
                             63 	.globl _SM2
                             64 	.globl _REN
                             65 	.globl _TB8
                             66 	.globl _RB8
                             67 	.globl _TI
                             68 	.globl _RI
                             69 	.globl _P1_7
                             70 	.globl _P1_6
                             71 	.globl _P1_5
                             72 	.globl _P1_4
                             73 	.globl _P1_3
                             74 	.globl _P1_2
                             75 	.globl _P1_1
                             76 	.globl _P1_0
                             77 	.globl _TF1
                             78 	.globl _TR1
                             79 	.globl _TF0
                             80 	.globl _TR0
                             81 	.globl _IE1
                             82 	.globl _IT1
                             83 	.globl _IE0
                             84 	.globl _IT0
                             85 	.globl _P0_7
                             86 	.globl _P0_6
                             87 	.globl _P0_5
                             88 	.globl _P0_4
                             89 	.globl _P0_3
                             90 	.globl _P0_2
                             91 	.globl _P0_1
                             92 	.globl _P0_0
                             93 	.globl _B
                             94 	.globl _ACC
                             95 	.globl _PSW
                             96 	.globl _IP
                             97 	.globl _P3
                             98 	.globl _IE
                             99 	.globl _P2
                            100 	.globl _SBUF
                            101 	.globl _SCON
                            102 	.globl _P1
                            103 	.globl _TH1
                            104 	.globl _TH0
                            105 	.globl _TL1
                            106 	.globl _TL0
                            107 	.globl _TMOD
                            108 	.globl _TCON
                            109 	.globl _PCON
                            110 	.globl _DPH
                            111 	.globl _DPL
                            112 	.globl _SP
                            113 	.globl _P0
                            114 	.globl _i
                            115 ;--------------------------------------------------------
                            116 ; special function registers
                            117 ;--------------------------------------------------------
                            118 	.area RSEG    (ABS,DATA)
   0000                     119 	.org 0x0000
                    0080    120 _P0	=	0x0080
                    0081    121 _SP	=	0x0081
                    0082    122 _DPL	=	0x0082
                    0083    123 _DPH	=	0x0083
                    0087    124 _PCON	=	0x0087
                    0088    125 _TCON	=	0x0088
                    0089    126 _TMOD	=	0x0089
                    008A    127 _TL0	=	0x008a
                    008B    128 _TL1	=	0x008b
                    008C    129 _TH0	=	0x008c
                    008D    130 _TH1	=	0x008d
                    0090    131 _P1	=	0x0090
                    0098    132 _SCON	=	0x0098
                    0099    133 _SBUF	=	0x0099
                    00A0    134 _P2	=	0x00a0
                    00A8    135 _IE	=	0x00a8
                    00B0    136 _P3	=	0x00b0
                    00B8    137 _IP	=	0x00b8
                    00D0    138 _PSW	=	0x00d0
                    00E0    139 _ACC	=	0x00e0
                    00F0    140 _B	=	0x00f0
                            141 ;--------------------------------------------------------
                            142 ; special function bits
                            143 ;--------------------------------------------------------
                            144 	.area RSEG    (ABS,DATA)
   0000                     145 	.org 0x0000
                    0080    146 _P0_0	=	0x0080
                    0081    147 _P0_1	=	0x0081
                    0082    148 _P0_2	=	0x0082
                    0083    149 _P0_3	=	0x0083
                    0084    150 _P0_4	=	0x0084
                    0085    151 _P0_5	=	0x0085
                    0086    152 _P0_6	=	0x0086
                    0087    153 _P0_7	=	0x0087
                    0088    154 _IT0	=	0x0088
                    0089    155 _IE0	=	0x0089
                    008A    156 _IT1	=	0x008a
                    008B    157 _IE1	=	0x008b
                    008C    158 _TR0	=	0x008c
                    008D    159 _TF0	=	0x008d
                    008E    160 _TR1	=	0x008e
                    008F    161 _TF1	=	0x008f
                    0090    162 _P1_0	=	0x0090
                    0091    163 _P1_1	=	0x0091
                    0092    164 _P1_2	=	0x0092
                    0093    165 _P1_3	=	0x0093
                    0094    166 _P1_4	=	0x0094
                    0095    167 _P1_5	=	0x0095
                    0096    168 _P1_6	=	0x0096
                    0097    169 _P1_7	=	0x0097
                    0098    170 _RI	=	0x0098
                    0099    171 _TI	=	0x0099
                    009A    172 _RB8	=	0x009a
                    009B    173 _TB8	=	0x009b
                    009C    174 _REN	=	0x009c
                    009D    175 _SM2	=	0x009d
                    009E    176 _SM1	=	0x009e
                    009F    177 _SM0	=	0x009f
                    00A0    178 _P2_0	=	0x00a0
                    00A1    179 _P2_1	=	0x00a1
                    00A2    180 _P2_2	=	0x00a2
                    00A3    181 _P2_3	=	0x00a3
                    00A4    182 _P2_4	=	0x00a4
                    00A5    183 _P2_5	=	0x00a5
                    00A6    184 _P2_6	=	0x00a6
                    00A7    185 _P2_7	=	0x00a7
                    00A8    186 _EX0	=	0x00a8
                    00A9    187 _ET0	=	0x00a9
                    00AA    188 _EX1	=	0x00aa
                    00AB    189 _ET1	=	0x00ab
                    00AC    190 _ES	=	0x00ac
                    00AF    191 _EA	=	0x00af
                    00B0    192 _P3_0	=	0x00b0
                    00B1    193 _P3_1	=	0x00b1
                    00B2    194 _P3_2	=	0x00b2
                    00B3    195 _P3_3	=	0x00b3
                    00B4    196 _P3_4	=	0x00b4
                    00B5    197 _P3_5	=	0x00b5
                    00B6    198 _P3_6	=	0x00b6
                    00B7    199 _P3_7	=	0x00b7
                    00B0    200 _RXD	=	0x00b0
                    00B1    201 _TXD	=	0x00b1
                    00B2    202 _INT0	=	0x00b2
                    00B3    203 _INT1	=	0x00b3
                    00B4    204 _T0	=	0x00b4
                    00B5    205 _T1	=	0x00b5
                    00B6    206 _WR	=	0x00b6
                    00B7    207 _RD	=	0x00b7
                    00B8    208 _PX0	=	0x00b8
                    00B9    209 _PT0	=	0x00b9
                    00BA    210 _PX1	=	0x00ba
                    00BB    211 _PT1	=	0x00bb
                    00BC    212 _PS	=	0x00bc
                    00D0    213 _P	=	0x00d0
                    00D1    214 _F1	=	0x00d1
                    00D2    215 _OV	=	0x00d2
                    00D3    216 _RS0	=	0x00d3
                    00D4    217 _RS1	=	0x00d4
                    00D5    218 _F0	=	0x00d5
                    00D6    219 _AC	=	0x00d6
                    00D7    220 _CY	=	0x00d7
                            221 ;--------------------------------------------------------
                            222 ; overlayable register banks
                            223 ;--------------------------------------------------------
                            224 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     225 	.ds 8
                            226 ;--------------------------------------------------------
                            227 ; internal ram data
                            228 ;--------------------------------------------------------
                            229 	.area DSEG    (DATA)
   0000                     230 _display_i_1_1:
   0000                     231 	.ds 4
   0004                     232 _display_d1_1_1:
   0004                     233 	.ds 1
   0005                     234 _display_d2_1_1:
   0005                     235 	.ds 1
   0006                     236 _display_d3_1_1:
   0006                     237 	.ds 1
   0007                     238 _display_sloc0_1_0:
   0007                     239 	.ds 4
   000B                     240 _i::
   000B                     241 	.ds 4
                            242 ;--------------------------------------------------------
                            243 ; overlayable items in internal ram 
                            244 ;--------------------------------------------------------
                            245 	.area	OSEG    (OVR,DATA)
                            246 ;--------------------------------------------------------
                            247 ; Stack segment in internal ram 
                            248 ;--------------------------------------------------------
                            249 	.area	SSEG	(DATA)
   0000                     250 __start__stack:
   0000                     251 	.ds	1
                            252 
                            253 ;--------------------------------------------------------
                            254 ; indirectly addressable internal ram data
                            255 ;--------------------------------------------------------
                            256 	.area ISEG    (DATA)
                            257 ;--------------------------------------------------------
                            258 ; absolute internal ram data
                            259 ;--------------------------------------------------------
                            260 	.area IABS    (ABS,DATA)
                            261 	.area IABS    (ABS,DATA)
                            262 ;--------------------------------------------------------
                            263 ; bit data
                            264 ;--------------------------------------------------------
                            265 	.area BSEG    (BIT)
                            266 ;--------------------------------------------------------
                            267 ; paged external ram data
                            268 ;--------------------------------------------------------
                            269 	.area PSEG    (PAG,XDATA)
                            270 ;--------------------------------------------------------
                            271 ; external ram data
                            272 ;--------------------------------------------------------
                            273 	.area XSEG    (XDATA)
                            274 ;--------------------------------------------------------
                            275 ; absolute external ram data
                            276 ;--------------------------------------------------------
                            277 	.area XABS    (ABS,XDATA)
                            278 ;--------------------------------------------------------
                            279 ; external initialized ram data
                            280 ;--------------------------------------------------------
                            281 	.area XISEG   (XDATA)
                            282 	.area HOME    (CODE)
                            283 	.area GSINIT0 (CODE)
                            284 	.area GSINIT1 (CODE)
                            285 	.area GSINIT2 (CODE)
                            286 	.area GSINIT3 (CODE)
                            287 	.area GSINIT4 (CODE)
                            288 	.area GSINIT5 (CODE)
                            289 	.area GSINIT  (CODE)
                            290 	.area GSFINAL (CODE)
                            291 	.area CSEG    (CODE)
                            292 ;--------------------------------------------------------
                            293 ; interrupt vector 
                            294 ;--------------------------------------------------------
                            295 	.area HOME    (CODE)
   0000                     296 __interrupt_vect:
   0000 02s00r00            297 	ljmp	__sdcc_gsinit_startup
   0003 32                  298 	reti
   0004                     299 	.ds	7
   000B 02s05r27            300 	ljmp	_timer
                            301 ;--------------------------------------------------------
                            302 ; global & static initialisations
                            303 ;--------------------------------------------------------
                            304 	.area HOME    (CODE)
                            305 	.area GSINIT  (CODE)
                            306 	.area GSFINAL (CODE)
                            307 	.area GSINIT  (CODE)
                            308 	.globl __sdcc_gsinit_startup
                            309 	.globl __sdcc_program_startup
                            310 	.globl __start__stack
                            311 	.globl __mcs51_genXINIT
                            312 	.globl __mcs51_genXRAMCLEAR
                            313 	.globl __mcs51_genRAMCLEAR
                            314 ;	test3.c:84: unsigned long int i=0;
   0000 E4                  315 	clr	a
   0001 F5*0B               316 	mov	_i,a
   0003 F5*0C               317 	mov	(_i + 1),a
   0005 F5*0D               318 	mov	(_i + 2),a
   0007 F5*0E               319 	mov	(_i + 3),a
                            320 	.area GSFINAL (CODE)
   0000 02s00r0E            321 	ljmp	__sdcc_program_startup
                            322 ;--------------------------------------------------------
                            323 ; Home
                            324 ;--------------------------------------------------------
                            325 	.area HOME    (CODE)
                            326 	.area HOME    (CODE)
   000E                     327 __sdcc_program_startup:
   000E 12s05r09            328 	lcall	_main
                            329 ;	return from main will lock up
   0011 80 FE               330 	sjmp .
                            331 ;--------------------------------------------------------
                            332 ; code
                            333 ;--------------------------------------------------------
                            334 	.area CSEG    (CODE)
                            335 ;------------------------------------------------------------
                            336 ;Allocation info for local variables in function 'delay'
                            337 ;------------------------------------------------------------
                            338 ;i                         Allocated to registers r6 r7 
                            339 ;a                         Allocated to registers r4 r5 
                            340 ;b                         Allocated to registers r2 r3 
                            341 ;------------------------------------------------------------
                            342 ;	test3.c:6: void delay(int i)
                            343 ;	-----------------------------------------
                            344 ;	 function delay
                            345 ;	-----------------------------------------
   0000                     346 _delay:
                    0007    347 	ar7 = 0x07
                    0006    348 	ar6 = 0x06
                    0005    349 	ar5 = 0x05
                    0004    350 	ar4 = 0x04
                    0003    351 	ar3 = 0x03
                    0002    352 	ar2 = 0x02
                    0001    353 	ar1 = 0x01
                    0000    354 	ar0 = 0x00
   0000 AE 82               355 	mov	r6,dpl
   0002 AF 83               356 	mov	r7,dph
                            357 ;	test3.c:9: for(a=0;a<i;a++)
   0004 7C 00               358 	mov	r4,#0x00
   0006 7D 00               359 	mov	r5,#0x00
   0008                     360 00104$:
   0008 C3                  361 	clr	c
   0009 EC                  362 	mov	a,r4
   000A 9E                  363 	subb	a,r6
   000B ED                  364 	mov	a,r5
   000C 64 80               365 	xrl	a,#0x80
   000E 8F F0               366 	mov	b,r7
   0010 63 F0 80            367 	xrl	b,#0x80
   0013 95 F0               368 	subb	a,b
   0015 50 14               369 	jnc	00108$
                            370 ;	test3.c:11: for(b=0;b<120;b++);
   0017 7A 78               371 	mov	r2,#0x78
   0019 7B 00               372 	mov	r3,#0x00
   001B                     373 00103$:
   001B 1A                  374 	dec	r2
   001C BA FF 01            375 	cjne	r2,#0xFF,00117$
   001F 1B                  376 	dec	r3
   0020                     377 00117$:
   0020 EA                  378 	mov	a,r2
   0021 4B                  379 	orl	a,r3
   0022 70 F7               380 	jnz	00103$
                            381 ;	test3.c:9: for(a=0;a<i;a++)
   0024 0C                  382 	inc	r4
   0025 BC 00 E0            383 	cjne	r4,#0x00,00104$
   0028 0D                  384 	inc	r5
   0029 80 DD               385 	sjmp	00104$
   002B                     386 00108$:
   002B 22                  387 	ret
                            388 ;------------------------------------------------------------
                            389 ;Allocation info for local variables in function 'display'
                            390 ;------------------------------------------------------------
                            391 ;i                         Allocated with name '_display_i_1_1'
                            392 ;d0                        Allocated to registers 
                            393 ;d1                        Allocated with name '_display_d1_1_1'
                            394 ;d2                        Allocated with name '_display_d2_1_1'
                            395 ;d3                        Allocated with name '_display_d3_1_1'
                            396 ;sloc0                     Allocated with name '_display_sloc0_1_0'
                            397 ;------------------------------------------------------------
                            398 ;	test3.c:21: void display(unsigned long int i)
                            399 ;	-----------------------------------------
                            400 ;	 function display
                            401 ;	-----------------------------------------
   002C                     402 _display:
   002C 85 82*00            403 	mov	_display_i_1_1,dpl
   002F 85 83*01            404 	mov	(_display_i_1_1 + 1),dph
   0032 85 F0*02            405 	mov	(_display_i_1_1 + 2),b
   0035 F5*03               406 	mov	(_display_i_1_1 + 3),a
                            407 ;	test3.c:25: unsigned char d1=0xFF;
   0037 75*04 FF            408 	mov	_display_d1_1_1,#0xFF
                            409 ;	test3.c:26: unsigned char d2=0x7F;
   003A 75*05 7F            410 	mov	_display_d2_1_1,#0x7F
                            411 ;	test3.c:27: unsigned char d3=0xFF;
   003D 75*06 FF            412 	mov	_display_d3_1_1,#0xFF
                            413 ;	test3.c:29: if(i/600>=60*100)
   0040 75*00 58            414 	mov	__divulong_PARM_2,#0x58
   0043 75*01 02            415 	mov	(__divulong_PARM_2 + 1),#0x02
   0046 E4                  416 	clr	a
   0047 F5*02               417 	mov	(__divulong_PARM_2 + 2),a
   0049 F5*03               418 	mov	(__divulong_PARM_2 + 3),a
   004B 85*00 82            419 	mov	dpl,_display_i_1_1
   004E 85*01 83            420 	mov	dph,(_display_i_1_1 + 1)
   0051 85*02 F0            421 	mov	b,(_display_i_1_1 + 2)
   0054 E5*03               422 	mov	a,(_display_i_1_1 + 3)
   0056 12s00r00            423 	lcall	__divulong
   0059 A8 82               424 	mov	r0,dpl
   005B A9 83               425 	mov	r1,dph
   005D AA F0               426 	mov	r2,b
   005F FB                  427 	mov	r3,a
   0060 C3                  428 	clr	c
   0061 E8                  429 	mov	a,r0
   0062 94 70               430 	subb	a,#0x70
   0064 E9                  431 	mov	a,r1
   0065 94 17               432 	subb	a,#0x17
   0067 EA                  433 	mov	a,r2
   0068 94 00               434 	subb	a,#0x00
   006A EB                  435 	mov	a,r3
   006B 94 00               436 	subb	a,#0x00
   006D 50 03               437 	jnc	00118$
   006F 02s01r38            438 	ljmp	00110$
   0072                     439 00118$:
                            440 ;	test3.c:31: i=i/60/60/(unsigned long int)100*(unsigned long int)1000000+(i%((unsigned long int)60*(unsigned long int)60*(unsigned long int)100))/(unsigned long int)6000*(unsigned long int)10000;
   0072 75*00 00            441 	mov	__divulong_PARM_2,#0x00
   0075 75*01 97            442 	mov	(__divulong_PARM_2 + 1),#0x97
   0078 75*02 49            443 	mov	(__divulong_PARM_2 + 2),#0x49
   007B 75*03 01            444 	mov	(__divulong_PARM_2 + 3),#0x01
   007E 85*00 82            445 	mov	dpl,_display_i_1_1
   0081 85*01 83            446 	mov	dph,(_display_i_1_1 + 1)
   0084 85*02 F0            447 	mov	b,(_display_i_1_1 + 2)
   0087 E5*03               448 	mov	a,(_display_i_1_1 + 3)
   0089 12s00r00            449 	lcall	__divulong
   008C 85 82*00            450 	mov	__mullong_PARM_2,dpl
   008F 85 83*01            451 	mov	(__mullong_PARM_2 + 1),dph
   0092 85 F0*02            452 	mov	(__mullong_PARM_2 + 2),b
   0095 F5*03               453 	mov	(__mullong_PARM_2 + 3),a
   0097 90 42 40            454 	mov	dptr,#0x4240
   009A 75 F0 0F            455 	mov	b,#0x0F
   009D E4                  456 	clr	a
   009E 12s00r00            457 	lcall	__mullong
   00A1 85 82*07            458 	mov	_display_sloc0_1_0,dpl
   00A4 85 83*08            459 	mov	(_display_sloc0_1_0 + 1),dph
   00A7 85 F0*09            460 	mov	(_display_sloc0_1_0 + 2),b
   00AA F5*0A               461 	mov	(_display_sloc0_1_0 + 3),a
   00AC 75*00 40            462 	mov	__modulong_PARM_2,#0x40
   00AF 75*01 7E            463 	mov	(__modulong_PARM_2 + 1),#0x7E
   00B2 75*02 05            464 	mov	(__modulong_PARM_2 + 2),#0x05
   00B5 75*03 00            465 	mov	(__modulong_PARM_2 + 3),#0x00
   00B8 85*00 82            466 	mov	dpl,_display_i_1_1
   00BB 85*01 83            467 	mov	dph,(_display_i_1_1 + 1)
   00BE 85*02 F0            468 	mov	b,(_display_i_1_1 + 2)
   00C1 E5*03               469 	mov	a,(_display_i_1_1 + 3)
   00C3 12s00r00            470 	lcall	__modulong
   00C6 A8 82               471 	mov	r0,dpl
   00C8 A9 83               472 	mov	r1,dph
   00CA AA F0               473 	mov	r2,b
   00CC FB                  474 	mov	r3,a
   00CD 75*00 70            475 	mov	__divulong_PARM_2,#0x70
   00D0 75*01 17            476 	mov	(__divulong_PARM_2 + 1),#0x17
   00D3 E4                  477 	clr	a
   00D4 F5*02               478 	mov	(__divulong_PARM_2 + 2),a
   00D6 F5*03               479 	mov	(__divulong_PARM_2 + 3),a
   00D8 88 82               480 	mov	dpl,r0
   00DA 89 83               481 	mov	dph,r1
   00DC 8A F0               482 	mov	b,r2
   00DE EB                  483 	mov	a,r3
   00DF 12s00r00            484 	lcall	__divulong
   00E2 85 82*00            485 	mov	__mullong_PARM_2,dpl
   00E5 85 83*01            486 	mov	(__mullong_PARM_2 + 1),dph
   00E8 85 F0*02            487 	mov	(__mullong_PARM_2 + 2),b
   00EB F5*03               488 	mov	(__mullong_PARM_2 + 3),a
   00ED 90 27 10            489 	mov	dptr,#0x2710
   00F0 E4                  490 	clr	a
   00F1 F5 F0               491 	mov	b,a
   00F3 12s00r00            492 	lcall	__mullong
   00F6 A8 82               493 	mov	r0,dpl
   00F8 A9 83               494 	mov	r1,dph
   00FA AA F0               495 	mov	r2,b
   00FC FB                  496 	mov	r3,a
   00FD E8                  497 	mov	a,r0
   00FE 25*07               498 	add	a,_display_sloc0_1_0
   0100 F5*00               499 	mov	_display_i_1_1,a
   0102 E9                  500 	mov	a,r1
   0103 35*08               501 	addc	a,(_display_sloc0_1_0 + 1)
   0105 F5*01               502 	mov	(_display_i_1_1 + 1),a
   0107 EA                  503 	mov	a,r2
   0108 35*09               504 	addc	a,(_display_sloc0_1_0 + 2)
   010A F5*02               505 	mov	(_display_i_1_1 + 2),a
   010C EB                  506 	mov	a,r3
   010D 35*0A               507 	addc	a,(_display_sloc0_1_0 + 3)
   010F F5*03               508 	mov	(_display_i_1_1 + 3),a
                            509 ;	test3.c:32: i/=(unsigned long int)10000;
   0111 75*00 10            510 	mov	__divulong_PARM_2,#0x10
   0114 75*01 27            511 	mov	(__divulong_PARM_2 + 1),#0x27
   0117 E4                  512 	clr	a
   0118 F5*02               513 	mov	(__divulong_PARM_2 + 2),a
   011A F5*03               514 	mov	(__divulong_PARM_2 + 3),a
   011C 85*00 82            515 	mov	dpl,_display_i_1_1
   011F 85*01 83            516 	mov	dph,(_display_i_1_1 + 1)
   0122 85*02 F0            517 	mov	b,(_display_i_1_1 + 2)
   0125 E5*03               518 	mov	a,(_display_i_1_1 + 3)
   0127 12s00r00            519 	lcall	__divulong
   012A 85 82*00            520 	mov	_display_i_1_1,dpl
   012D 85 83*01            521 	mov	(_display_i_1_1 + 1),dph
   0130 85 F0*02            522 	mov	(_display_i_1_1 + 2),b
   0133 F5*03               523 	mov	(_display_i_1_1 + 3),a
   0135 02s03rE2            524 	ljmp	00111$
   0138                     525 00110$:
                            526 ;	test3.c:37: else if(i/60>=60*100)
   0138 75*00 3C            527 	mov	__divulong_PARM_2,#0x3C
   013B E4                  528 	clr	a
   013C F5*01               529 	mov	(__divulong_PARM_2 + 1),a
   013E F5*02               530 	mov	(__divulong_PARM_2 + 2),a
   0140 F5*03               531 	mov	(__divulong_PARM_2 + 3),a
   0142 85*00 82            532 	mov	dpl,_display_i_1_1
   0145 85*01 83            533 	mov	dph,(_display_i_1_1 + 1)
   0148 85*02 F0            534 	mov	b,(_display_i_1_1 + 2)
   014B E5*03               535 	mov	a,(_display_i_1_1 + 3)
   014D 12s00r00            536 	lcall	__divulong
   0150 A8 82               537 	mov	r0,dpl
   0152 A9 83               538 	mov	r1,dph
   0154 AA F0               539 	mov	r2,b
   0156 FB                  540 	mov	r3,a
   0157 C3                  541 	clr	c
   0158 E8                  542 	mov	a,r0
   0159 94 70               543 	subb	a,#0x70
   015B E9                  544 	mov	a,r1
   015C 94 17               545 	subb	a,#0x17
   015E EA                  546 	mov	a,r2
   015F 94 00               547 	subb	a,#0x00
   0161 EB                  548 	mov	a,r3
   0162 94 00               549 	subb	a,#0x00
   0164 50 03               550 	jnc	00119$
   0166 02s02r7C            551 	ljmp	00107$
   0169                     552 00119$:
                            553 ;	test3.c:39: i=i/60/60/(unsigned long int)100*(unsigned long int)1000000+(i%((unsigned long int)60*(unsigned long int)60*(unsigned long int)100))/(unsigned long int)6000*(unsigned long int)10000 + i%(unsigned long int)6000;
   0169 75*00 00            554 	mov	__divulong_PARM_2,#0x00
   016C 75*01 97            555 	mov	(__divulong_PARM_2 + 1),#0x97
   016F 75*02 49            556 	mov	(__divulong_PARM_2 + 2),#0x49
   0172 75*03 01            557 	mov	(__divulong_PARM_2 + 3),#0x01
   0175 85*00 82            558 	mov	dpl,_display_i_1_1
   0178 85*01 83            559 	mov	dph,(_display_i_1_1 + 1)
   017B 85*02 F0            560 	mov	b,(_display_i_1_1 + 2)
   017E E5*03               561 	mov	a,(_display_i_1_1 + 3)
   0180 12s00r00            562 	lcall	__divulong
   0183 85 82*00            563 	mov	__mullong_PARM_2,dpl
   0186 85 83*01            564 	mov	(__mullong_PARM_2 + 1),dph
   0189 85 F0*02            565 	mov	(__mullong_PARM_2 + 2),b
   018C F5*03               566 	mov	(__mullong_PARM_2 + 3),a
   018E 90 42 40            567 	mov	dptr,#0x4240
   0191 75 F0 0F            568 	mov	b,#0x0F
   0194 E4                  569 	clr	a
   0195 12s00r00            570 	lcall	__mullong
   0198 A8 82               571 	mov	r0,dpl
   019A A9 83               572 	mov	r1,dph
   019C AA F0               573 	mov	r2,b
   019E FB                  574 	mov	r3,a
   019F 75*00 40            575 	mov	__modulong_PARM_2,#0x40
   01A2 75*01 7E            576 	mov	(__modulong_PARM_2 + 1),#0x7E
   01A5 75*02 05            577 	mov	(__modulong_PARM_2 + 2),#0x05
   01A8 75*03 00            578 	mov	(__modulong_PARM_2 + 3),#0x00
   01AB 85*00 82            579 	mov	dpl,_display_i_1_1
   01AE 85*01 83            580 	mov	dph,(_display_i_1_1 + 1)
   01B1 85*02 F0            581 	mov	b,(_display_i_1_1 + 2)
   01B4 E5*03               582 	mov	a,(_display_i_1_1 + 3)
   01B6 C0 03               583 	push	ar3
   01B8 C0 02               584 	push	ar2
   01BA C0 01               585 	push	ar1
   01BC C0 00               586 	push	ar0
   01BE 12s00r00            587 	lcall	__modulong
   01C1 AC 82               588 	mov	r4,dpl
   01C3 AD 83               589 	mov	r5,dph
   01C5 AE F0               590 	mov	r6,b
   01C7 FF                  591 	mov	r7,a
   01C8 75*00 70            592 	mov	__divulong_PARM_2,#0x70
   01CB 75*01 17            593 	mov	(__divulong_PARM_2 + 1),#0x17
   01CE E4                  594 	clr	a
   01CF F5*02               595 	mov	(__divulong_PARM_2 + 2),a
   01D1 F5*03               596 	mov	(__divulong_PARM_2 + 3),a
   01D3 8C 82               597 	mov	dpl,r4
   01D5 8D 83               598 	mov	dph,r5
   01D7 8E F0               599 	mov	b,r6
   01D9 EF                  600 	mov	a,r7
   01DA 12s00r00            601 	lcall	__divulong
   01DD 85 82*00            602 	mov	__mullong_PARM_2,dpl
   01E0 85 83*01            603 	mov	(__mullong_PARM_2 + 1),dph
   01E3 85 F0*02            604 	mov	(__mullong_PARM_2 + 2),b
   01E6 F5*03               605 	mov	(__mullong_PARM_2 + 3),a
   01E8 90 27 10            606 	mov	dptr,#0x2710
   01EB E4                  607 	clr	a
   01EC F5 F0               608 	mov	b,a
   01EE 12s00r00            609 	lcall	__mullong
   01F1 AC 82               610 	mov	r4,dpl
   01F3 AD 83               611 	mov	r5,dph
   01F5 AE F0               612 	mov	r6,b
   01F7 FF                  613 	mov	r7,a
   01F8 D0 00               614 	pop	ar0
   01FA D0 01               615 	pop	ar1
   01FC D0 02               616 	pop	ar2
   01FE D0 03               617 	pop	ar3
   0200 EC                  618 	mov	a,r4
   0201 28                  619 	add	a,r0
   0202 F8                  620 	mov	r0,a
   0203 ED                  621 	mov	a,r5
   0204 39                  622 	addc	a,r1
   0205 F9                  623 	mov	r1,a
   0206 EE                  624 	mov	a,r6
   0207 3A                  625 	addc	a,r2
   0208 FA                  626 	mov	r2,a
   0209 EF                  627 	mov	a,r7
   020A 3B                  628 	addc	a,r3
   020B FB                  629 	mov	r3,a
   020C 75*00 70            630 	mov	__modulong_PARM_2,#0x70
   020F 75*01 17            631 	mov	(__modulong_PARM_2 + 1),#0x17
   0212 E4                  632 	clr	a
   0213 F5*02               633 	mov	(__modulong_PARM_2 + 2),a
   0215 F5*03               634 	mov	(__modulong_PARM_2 + 3),a
   0217 85*00 82            635 	mov	dpl,_display_i_1_1
   021A 85*01 83            636 	mov	dph,(_display_i_1_1 + 1)
   021D 85*02 F0            637 	mov	b,(_display_i_1_1 + 2)
   0220 E5*03               638 	mov	a,(_display_i_1_1 + 3)
   0222 C0 03               639 	push	ar3
   0224 C0 02               640 	push	ar2
   0226 C0 01               641 	push	ar1
   0228 C0 00               642 	push	ar0
   022A 12s00r00            643 	lcall	__modulong
   022D AC 82               644 	mov	r4,dpl
   022F AD 83               645 	mov	r5,dph
   0231 AE F0               646 	mov	r6,b
   0233 FF                  647 	mov	r7,a
   0234 D0 00               648 	pop	ar0
   0236 D0 01               649 	pop	ar1
   0238 D0 02               650 	pop	ar2
   023A D0 03               651 	pop	ar3
   023C EC                  652 	mov	a,r4
   023D 28                  653 	add	a,r0
   023E F5*00               654 	mov	_display_i_1_1,a
   0240 ED                  655 	mov	a,r5
   0241 39                  656 	addc	a,r1
   0242 F5*01               657 	mov	(_display_i_1_1 + 1),a
   0244 EE                  658 	mov	a,r6
   0245 3A                  659 	addc	a,r2
   0246 F5*02               660 	mov	(_display_i_1_1 + 2),a
   0248 EF                  661 	mov	a,r7
   0249 3B                  662 	addc	a,r3
   024A F5*03               663 	mov	(_display_i_1_1 + 3),a
                            664 ;	test3.c:40: i/=1000;
   024C 75*00 E8            665 	mov	__divulong_PARM_2,#0xE8
   024F 75*01 03            666 	mov	(__divulong_PARM_2 + 1),#0x03
   0252 E4                  667 	clr	a
   0253 F5*02               668 	mov	(__divulong_PARM_2 + 2),a
   0255 F5*03               669 	mov	(__divulong_PARM_2 + 3),a
   0257 85*00 82            670 	mov	dpl,_display_i_1_1
   025A 85*01 83            671 	mov	dph,(_display_i_1_1 + 1)
   025D 85*02 F0            672 	mov	b,(_display_i_1_1 + 2)
   0260 E5*03               673 	mov	a,(_display_i_1_1 + 3)
   0262 12s00r00            674 	lcall	__divulong
   0265 85 82*00            675 	mov	_display_i_1_1,dpl
   0268 85 83*01            676 	mov	(_display_i_1_1 + 1),dph
   026B 85 F0*02            677 	mov	(_display_i_1_1 + 2),b
   026E F5*03               678 	mov	(_display_i_1_1 + 3),a
                            679 ;	test3.c:41: d2=0xFF;
   0270 75*05 FF            680 	mov	_display_d2_1_1,#0xFF
                            681 ;	test3.c:42: d1=0x7F;
   0273 75*04 7F            682 	mov	_display_d1_1_1,#0x7F
                            683 ;	test3.c:43: d3=0x7F;
   0276 75*06 7F            684 	mov	_display_d3_1_1,#0x7F
   0279 02s03rE2            685 	ljmp	00111$
   027C                     686 00107$:
                            687 ;	test3.c:45: else if(i>=60000)
   027C C3                  688 	clr	c
   027D E5*00               689 	mov	a,_display_i_1_1
   027F 94 60               690 	subb	a,#0x60
   0281 E5*01               691 	mov	a,(_display_i_1_1 + 1)
   0283 94 EA               692 	subb	a,#0xEA
   0285 E5*02               693 	mov	a,(_display_i_1_1 + 2)
   0287 94 00               694 	subb	a,#0x00
   0289 E5*03               695 	mov	a,(_display_i_1_1 + 3)
   028B 94 00               696 	subb	a,#0x00
   028D 50 03               697 	jnc	00120$
   028F 02s03r2C            698 	ljmp	00104$
   0292                     699 00120$:
                            700 ;	test3.c:47: i=i/6000*10000+i%6000;
   0292 75*00 70            701 	mov	__divulong_PARM_2,#0x70
   0295 75*01 17            702 	mov	(__divulong_PARM_2 + 1),#0x17
   0298 E4                  703 	clr	a
   0299 F5*02               704 	mov	(__divulong_PARM_2 + 2),a
   029B F5*03               705 	mov	(__divulong_PARM_2 + 3),a
   029D 85*00 82            706 	mov	dpl,_display_i_1_1
   02A0 85*01 83            707 	mov	dph,(_display_i_1_1 + 1)
   02A3 85*02 F0            708 	mov	b,(_display_i_1_1 + 2)
   02A6 E5*03               709 	mov	a,(_display_i_1_1 + 3)
   02A8 12s00r00            710 	lcall	__divulong
   02AB 85 82*00            711 	mov	__mullong_PARM_2,dpl
   02AE 85 83*01            712 	mov	(__mullong_PARM_2 + 1),dph
   02B1 85 F0*02            713 	mov	(__mullong_PARM_2 + 2),b
   02B4 F5*03               714 	mov	(__mullong_PARM_2 + 3),a
   02B6 90 27 10            715 	mov	dptr,#0x2710
   02B9 E4                  716 	clr	a
   02BA F5 F0               717 	mov	b,a
   02BC 12s00r00            718 	lcall	__mullong
   02BF AC 82               719 	mov	r4,dpl
   02C1 AD 83               720 	mov	r5,dph
   02C3 AE F0               721 	mov	r6,b
   02C5 FF                  722 	mov	r7,a
   02C6 75*00 70            723 	mov	__modulong_PARM_2,#0x70
   02C9 75*01 17            724 	mov	(__modulong_PARM_2 + 1),#0x17
   02CC E4                  725 	clr	a
   02CD F5*02               726 	mov	(__modulong_PARM_2 + 2),a
   02CF F5*03               727 	mov	(__modulong_PARM_2 + 3),a
   02D1 85*00 82            728 	mov	dpl,_display_i_1_1
   02D4 85*01 83            729 	mov	dph,(_display_i_1_1 + 1)
   02D7 85*02 F0            730 	mov	b,(_display_i_1_1 + 2)
   02DA E5*03               731 	mov	a,(_display_i_1_1 + 3)
   02DC C0 07               732 	push	ar7
   02DE C0 06               733 	push	ar6
   02E0 C0 05               734 	push	ar5
   02E2 C0 04               735 	push	ar4
   02E4 12s00r00            736 	lcall	__modulong
   02E7 A8 82               737 	mov	r0,dpl
   02E9 A9 83               738 	mov	r1,dph
   02EB AA F0               739 	mov	r2,b
   02ED FB                  740 	mov	r3,a
   02EE D0 04               741 	pop	ar4
   02F0 D0 05               742 	pop	ar5
   02F2 D0 06               743 	pop	ar6
   02F4 D0 07               744 	pop	ar7
   02F6 E8                  745 	mov	a,r0
   02F7 2C                  746 	add	a,r4
   02F8 F5*00               747 	mov	_display_i_1_1,a
   02FA E9                  748 	mov	a,r1
   02FB 3D                  749 	addc	a,r5
   02FC F5*01               750 	mov	(_display_i_1_1 + 1),a
   02FE EA                  751 	mov	a,r2
   02FF 3E                  752 	addc	a,r6
   0300 F5*02               753 	mov	(_display_i_1_1 + 2),a
   0302 EB                  754 	mov	a,r3
   0303 3F                  755 	addc	a,r7
   0304 F5*03               756 	mov	(_display_i_1_1 + 3),a
                            757 ;	test3.c:48: i/=100;
   0306 75*00 64            758 	mov	__divulong_PARM_2,#0x64
   0309 E4                  759 	clr	a
   030A F5*01               760 	mov	(__divulong_PARM_2 + 1),a
   030C F5*02               761 	mov	(__divulong_PARM_2 + 2),a
   030E F5*03               762 	mov	(__divulong_PARM_2 + 3),a
   0310 85*00 82            763 	mov	dpl,_display_i_1_1
   0313 85*01 83            764 	mov	dph,(_display_i_1_1 + 1)
   0316 85*02 F0            765 	mov	b,(_display_i_1_1 + 2)
   0319 E5*03               766 	mov	a,(_display_i_1_1 + 3)
   031B 12s00r00            767 	lcall	__divulong
   031E 85 82*00            768 	mov	_display_i_1_1,dpl
   0321 85 83*01            769 	mov	(_display_i_1_1 + 1),dph
   0324 85 F0*02            770 	mov	(_display_i_1_1 + 2),b
   0327 F5*03               771 	mov	(_display_i_1_1 + 3),a
   0329 02s03rE2            772 	ljmp	00111$
   032C                     773 00104$:
                            774 ;	test3.c:53: else if(i>=6000)
   032C C3                  775 	clr	c
   032D E5*00               776 	mov	a,_display_i_1_1
   032F 94 70               777 	subb	a,#0x70
   0331 E5*01               778 	mov	a,(_display_i_1_1 + 1)
   0333 94 17               779 	subb	a,#0x17
   0335 E5*02               780 	mov	a,(_display_i_1_1 + 2)
   0337 94 00               781 	subb	a,#0x00
   0339 E5*03               782 	mov	a,(_display_i_1_1 + 3)
   033B 94 00               783 	subb	a,#0x00
   033D 50 03               784 	jnc	00121$
   033F 02s03rE2            785 	ljmp	00111$
   0342                     786 00121$:
                            787 ;	test3.c:56: i=i/6000*10000+i%6000;
   0342 75*00 70            788 	mov	__divulong_PARM_2,#0x70
   0345 75*01 17            789 	mov	(__divulong_PARM_2 + 1),#0x17
   0348 E4                  790 	clr	a
   0349 F5*02               791 	mov	(__divulong_PARM_2 + 2),a
   034B F5*03               792 	mov	(__divulong_PARM_2 + 3),a
   034D 85*00 82            793 	mov	dpl,_display_i_1_1
   0350 85*01 83            794 	mov	dph,(_display_i_1_1 + 1)
   0353 85*02 F0            795 	mov	b,(_display_i_1_1 + 2)
   0356 E5*03               796 	mov	a,(_display_i_1_1 + 3)
   0358 12s00r00            797 	lcall	__divulong
   035B 85 82*00            798 	mov	__mullong_PARM_2,dpl
   035E 85 83*01            799 	mov	(__mullong_PARM_2 + 1),dph
   0361 85 F0*02            800 	mov	(__mullong_PARM_2 + 2),b
   0364 F5*03               801 	mov	(__mullong_PARM_2 + 3),a
   0366 90 27 10            802 	mov	dptr,#0x2710
   0369 E4                  803 	clr	a
   036A F5 F0               804 	mov	b,a
   036C 12s00r00            805 	lcall	__mullong
   036F AC 82               806 	mov	r4,dpl
   0371 AD 83               807 	mov	r5,dph
   0373 AE F0               808 	mov	r6,b
   0375 FF                  809 	mov	r7,a
   0376 75*00 70            810 	mov	__modulong_PARM_2,#0x70
   0379 75*01 17            811 	mov	(__modulong_PARM_2 + 1),#0x17
   037C E4                  812 	clr	a
   037D F5*02               813 	mov	(__modulong_PARM_2 + 2),a
   037F F5*03               814 	mov	(__modulong_PARM_2 + 3),a
   0381 85*00 82            815 	mov	dpl,_display_i_1_1
   0384 85*01 83            816 	mov	dph,(_display_i_1_1 + 1)
   0387 85*02 F0            817 	mov	b,(_display_i_1_1 + 2)
   038A E5*03               818 	mov	a,(_display_i_1_1 + 3)
   038C C0 07               819 	push	ar7
   038E C0 06               820 	push	ar6
   0390 C0 05               821 	push	ar5
   0392 C0 04               822 	push	ar4
   0394 12s00r00            823 	lcall	__modulong
   0397 A8 82               824 	mov	r0,dpl
   0399 A9 83               825 	mov	r1,dph
   039B AA F0               826 	mov	r2,b
   039D FB                  827 	mov	r3,a
   039E D0 04               828 	pop	ar4
   03A0 D0 05               829 	pop	ar5
   03A2 D0 06               830 	pop	ar6
   03A4 D0 07               831 	pop	ar7
   03A6 E8                  832 	mov	a,r0
   03A7 2C                  833 	add	a,r4
   03A8 F5*00               834 	mov	_display_i_1_1,a
   03AA E9                  835 	mov	a,r1
   03AB 3D                  836 	addc	a,r5
   03AC F5*01               837 	mov	(_display_i_1_1 + 1),a
   03AE EA                  838 	mov	a,r2
   03AF 3E                  839 	addc	a,r6
   03B0 F5*02               840 	mov	(_display_i_1_1 + 2),a
   03B2 EB                  841 	mov	a,r3
   03B3 3F                  842 	addc	a,r7
   03B4 F5*03               843 	mov	(_display_i_1_1 + 3),a
                            844 ;	test3.c:57: i/=10;
   03B6 75*00 0A            845 	mov	__divulong_PARM_2,#0x0A
   03B9 E4                  846 	clr	a
   03BA F5*01               847 	mov	(__divulong_PARM_2 + 1),a
   03BC F5*02               848 	mov	(__divulong_PARM_2 + 2),a
   03BE F5*03               849 	mov	(__divulong_PARM_2 + 3),a
   03C0 85*00 82            850 	mov	dpl,_display_i_1_1
   03C3 85*01 83            851 	mov	dph,(_display_i_1_1 + 1)
   03C6 85*02 F0            852 	mov	b,(_display_i_1_1 + 2)
   03C9 E5*03               853 	mov	a,(_display_i_1_1 + 3)
   03CB 12s00r00            854 	lcall	__divulong
   03CE 85 82*00            855 	mov	_display_i_1_1,dpl
   03D1 85 83*01            856 	mov	(_display_i_1_1 + 1),dph
   03D4 85 F0*02            857 	mov	(_display_i_1_1 + 2),b
   03D7 F5*03               858 	mov	(_display_i_1_1 + 3),a
                            859 ;	test3.c:58: d2=0xFF;
   03D9 75*05 FF            860 	mov	_display_d2_1_1,#0xFF
                            861 ;	test3.c:59: d1=0x7F;
   03DC 75*04 7F            862 	mov	_display_d1_1_1,#0x7F
                            863 ;	test3.c:60: d3=0x7F;
   03DF 75*06 7F            864 	mov	_display_d3_1_1,#0x7F
   03E2                     865 00111$:
                            866 ;	test3.c:62: P0=255;
   03E2 75 80 FF            867 	mov	_P0,#0xFF
                            868 ;	test3.c:64: P2 = seg_position[3];
   03E5 90s00r0E            869 	mov	dptr,#(_seg_position + 0x0003)
   03E8 E4                  870 	clr	a
   03E9 93                  871 	movc	a,@a+dptr
   03EA F5 A0               872 	mov	_P2,a
                            873 ;	test3.c:65: P0=display_seg[i/1000] & d3;
   03EC 75*00 E8            874 	mov	__divulong_PARM_2,#0xE8
   03EF 75*01 03            875 	mov	(__divulong_PARM_2 + 1),#0x03
   03F2 E4                  876 	clr	a
   03F3 F5*02               877 	mov	(__divulong_PARM_2 + 2),a
   03F5 F5*03               878 	mov	(__divulong_PARM_2 + 3),a
   03F7 85*00 82            879 	mov	dpl,_display_i_1_1
   03FA 85*01 83            880 	mov	dph,(_display_i_1_1 + 1)
   03FD 85*02 F0            881 	mov	b,(_display_i_1_1 + 2)
   0400 E5*03               882 	mov	a,(_display_i_1_1 + 3)
   0402 12s00r00            883 	lcall	__divulong
   0405 AC 82               884 	mov	r4,dpl
   0407 AD 83               885 	mov	r5,dph
   0409 EC                  886 	mov	a,r4
   040A 24r00               887 	add	a,#_display_seg
   040C F5 82               888 	mov	dpl,a
   040E ED                  889 	mov	a,r5
   040F 34s00               890 	addc	a,#(_display_seg >> 8)
   0411 F5 83               891 	mov	dph,a
   0413 E4                  892 	clr	a
   0414 93                  893 	movc	a,@a+dptr
   0415 FF                  894 	mov	r7,a
   0416 E5*06               895 	mov	a,_display_d3_1_1
   0418 5F                  896 	anl	a,r7
   0419 F5 80               897 	mov	_P0,a
                            898 ;	test3.c:66: delay(3);
   041B 90 00 03            899 	mov	dptr,#0x0003
   041E 12s00r00            900 	lcall	_delay
                            901 ;	test3.c:68: P0=255;
   0421 75 80 FF            902 	mov	_P0,#0xFF
                            903 ;	test3.c:69: P2 = seg_position[2];
   0424 90s00r0D            904 	mov	dptr,#(_seg_position + 0x0002)
   0427 E4                  905 	clr	a
   0428 93                  906 	movc	a,@a+dptr
   0429 F5 A0               907 	mov	_P2,a
                            908 ;	test3.c:70: P0=display_seg[i%1000/100] & d2;
   042B 75*00 E8            909 	mov	__modulong_PARM_2,#0xE8
   042E 75*01 03            910 	mov	(__modulong_PARM_2 + 1),#0x03
   0431 E4                  911 	clr	a
   0432 F5*02               912 	mov	(__modulong_PARM_2 + 2),a
   0434 F5*03               913 	mov	(__modulong_PARM_2 + 3),a
   0436 85*00 82            914 	mov	dpl,_display_i_1_1
   0439 85*01 83            915 	mov	dph,(_display_i_1_1 + 1)
   043C 85*02 F0            916 	mov	b,(_display_i_1_1 + 2)
   043F E5*03               917 	mov	a,(_display_i_1_1 + 3)
   0441 12s00r00            918 	lcall	__modulong
   0444 AC 82               919 	mov	r4,dpl
   0446 AD 83               920 	mov	r5,dph
   0448 AE F0               921 	mov	r6,b
   044A FF                  922 	mov	r7,a
   044B 75*00 64            923 	mov	__divulong_PARM_2,#0x64
   044E E4                  924 	clr	a
   044F F5*01               925 	mov	(__divulong_PARM_2 + 1),a
   0451 F5*02               926 	mov	(__divulong_PARM_2 + 2),a
   0453 F5*03               927 	mov	(__divulong_PARM_2 + 3),a
   0455 8C 82               928 	mov	dpl,r4
   0457 8D 83               929 	mov	dph,r5
   0459 8E F0               930 	mov	b,r6
   045B EF                  931 	mov	a,r7
   045C 12s00r00            932 	lcall	__divulong
   045F AC 82               933 	mov	r4,dpl
   0461 AD 83               934 	mov	r5,dph
   0463 EC                  935 	mov	a,r4
   0464 24r00               936 	add	a,#_display_seg
   0466 F5 82               937 	mov	dpl,a
   0468 ED                  938 	mov	a,r5
   0469 34s00               939 	addc	a,#(_display_seg >> 8)
   046B F5 83               940 	mov	dph,a
   046D E4                  941 	clr	a
   046E 93                  942 	movc	a,@a+dptr
   046F FF                  943 	mov	r7,a
   0470 E5*05               944 	mov	a,_display_d2_1_1
   0472 5F                  945 	anl	a,r7
   0473 F5 80               946 	mov	_P0,a
                            947 ;	test3.c:71: delay(3);
   0475 90 00 03            948 	mov	dptr,#0x0003
   0478 12s00r00            949 	lcall	_delay
                            950 ;	test3.c:72: P0=255;
   047B 75 80 FF            951 	mov	_P0,#0xFF
                            952 ;	test3.c:73: P2 = seg_position[1];
   047E 90s00r0C            953 	mov	dptr,#(_seg_position + 0x0001)
   0481 E4                  954 	clr	a
   0482 93                  955 	movc	a,@a+dptr
   0483 F5 A0               956 	mov	_P2,a
                            957 ;	test3.c:74: P0=display_seg[i%100/10] & d1;
   0485 75*00 64            958 	mov	__modulong_PARM_2,#0x64
   0488 E4                  959 	clr	a
   0489 F5*01               960 	mov	(__modulong_PARM_2 + 1),a
   048B F5*02               961 	mov	(__modulong_PARM_2 + 2),a
   048D F5*03               962 	mov	(__modulong_PARM_2 + 3),a
   048F 85*00 82            963 	mov	dpl,_display_i_1_1
   0492 85*01 83            964 	mov	dph,(_display_i_1_1 + 1)
   0495 85*02 F0            965 	mov	b,(_display_i_1_1 + 2)
   0498 E5*03               966 	mov	a,(_display_i_1_1 + 3)
   049A 12s00r00            967 	lcall	__modulong
   049D AC 82               968 	mov	r4,dpl
   049F AD 83               969 	mov	r5,dph
   04A1 AE F0               970 	mov	r6,b
   04A3 FF                  971 	mov	r7,a
   04A4 75*00 0A            972 	mov	__divulong_PARM_2,#0x0A
   04A7 E4                  973 	clr	a
   04A8 F5*01               974 	mov	(__divulong_PARM_2 + 1),a
   04AA F5*02               975 	mov	(__divulong_PARM_2 + 2),a
   04AC F5*03               976 	mov	(__divulong_PARM_2 + 3),a
   04AE 8C 82               977 	mov	dpl,r4
   04B0 8D 83               978 	mov	dph,r5
   04B2 8E F0               979 	mov	b,r6
   04B4 EF                  980 	mov	a,r7
   04B5 12s00r00            981 	lcall	__divulong
   04B8 AC 82               982 	mov	r4,dpl
   04BA AD 83               983 	mov	r5,dph
   04BC EC                  984 	mov	a,r4
   04BD 24r00               985 	add	a,#_display_seg
   04BF F5 82               986 	mov	dpl,a
   04C1 ED                  987 	mov	a,r5
   04C2 34s00               988 	addc	a,#(_display_seg >> 8)
   04C4 F5 83               989 	mov	dph,a
   04C6 E4                  990 	clr	a
   04C7 93                  991 	movc	a,@a+dptr
   04C8 FF                  992 	mov	r7,a
   04C9 E5*04               993 	mov	a,_display_d1_1_1
   04CB 5F                  994 	anl	a,r7
   04CC F5 80               995 	mov	_P0,a
                            996 ;	test3.c:75: delay(3);
   04CE 90 00 03            997 	mov	dptr,#0x0003
   04D1 12s00r00            998 	lcall	_delay
                            999 ;	test3.c:76: P0=255;
   04D4 75 80 FF           1000 	mov	_P0,#0xFF
                           1001 ;	test3.c:77: P2 = seg_position[0];
   04D7 90s00r0B           1002 	mov	dptr,#_seg_position
   04DA E4                 1003 	clr	a
   04DB 93                 1004 	movc	a,@a+dptr
   04DC F5 A0              1005 	mov	_P2,a
                           1006 ;	test3.c:78: P0=display_seg[i%10] & d0;
   04DE 75*00 0A           1007 	mov	__modulong_PARM_2,#0x0A
   04E1 E4                 1008 	clr	a
   04E2 F5*01              1009 	mov	(__modulong_PARM_2 + 1),a
   04E4 F5*02              1010 	mov	(__modulong_PARM_2 + 2),a
   04E6 F5*03              1011 	mov	(__modulong_PARM_2 + 3),a
   04E8 85*00 82           1012 	mov	dpl,_display_i_1_1
   04EB 85*01 83           1013 	mov	dph,(_display_i_1_1 + 1)
   04EE 85*02 F0           1014 	mov	b,(_display_i_1_1 + 2)
   04F1 E5*03              1015 	mov	a,(_display_i_1_1 + 3)
   04F3 12s00r00           1016 	lcall	__modulong
   04F6 AC 82              1017 	mov	r4,dpl
   04F8 AD 83              1018 	mov	r5,dph
   04FA EC                 1019 	mov	a,r4
   04FB 24r00              1020 	add	a,#_display_seg
   04FD F5 82              1021 	mov	dpl,a
   04FF ED                 1022 	mov	a,r5
   0500 34s00              1023 	addc	a,#(_display_seg >> 8)
   0502 F5 83              1024 	mov	dph,a
   0504 E4                 1025 	clr	a
   0505 93                 1026 	movc	a,@a+dptr
   0506 F5 80              1027 	mov	_P0,a
   0508 22                 1028 	ret
                           1029 ;------------------------------------------------------------
                           1030 ;Allocation info for local variables in function 'main'
                           1031 ;------------------------------------------------------------
                           1032 ;	test3.c:85: void main()
                           1033 ;	-----------------------------------------
                           1034 ;	 function main
                           1035 ;	-----------------------------------------
   0509                    1036 _main:
                           1037 ;	test3.c:88: IE=0x8a;
   0509 75 A8 8A           1038 	mov	_IE,#0x8A
                           1039 ;	test3.c:89: TMOD=0x11;
   050C 75 89 11           1040 	mov	_TMOD,#0x11
                           1041 ;	test3.c:90: TH0=(65536-10000)/256;
   050F 75 8C D8           1042 	mov	_TH0,#0xD8
                           1043 ;	test3.c:91: TL0=(65536-10000)%256;
   0512 75 8A F0           1044 	mov	_TL0,#0xF0
                           1045 ;	test3.c:92: TR0=1;
   0515 D2 8C              1046 	setb	_TR0
                           1047 ;	test3.c:93: while(1)
   0517                    1048 00102$:
                           1049 ;	test3.c:97: display(i);
   0517 85*0B 82           1050 	mov	dpl,_i
   051A 85*0C 83           1051 	mov	dph,(_i + 1)
   051D 85*0D F0           1052 	mov	b,(_i + 2)
   0520 E5*0E              1053 	mov	a,(_i + 3)
   0522 12s00r2C           1054 	lcall	_display
   0525 80 F0              1055 	sjmp	00102$
                           1056 ;------------------------------------------------------------
                           1057 ;Allocation info for local variables in function 'timer'
                           1058 ;------------------------------------------------------------
                           1059 ;	test3.c:102: void timer() interrupt 1
                           1060 ;	-----------------------------------------
                           1061 ;	 function timer
                           1062 ;	-----------------------------------------
   0527                    1063 _timer:
   0527 C0 E0              1064 	push	acc
   0529 C0 D0              1065 	push	psw
                           1066 ;	test3.c:104: TH0=(65536-10000)/256;
   052B 75 8C D8           1067 	mov	_TH0,#0xD8
                           1068 ;	test3.c:105: TL0=(65536-10000)%256;
   052E 75 8A F0           1069 	mov	_TL0,#0xF0
                           1070 ;	test3.c:106: i++;
   0531 05*0B              1071 	inc	_i
   0533 E4                 1072 	clr	a
   0534 B5*0B 0C           1073 	cjne	a,_i,00103$
   0537 05*0C              1074 	inc	(_i + 1)
   0539 B5*0C 07           1075 	cjne	a,(_i + 1),00103$
   053C 05*0D              1076 	inc	(_i + 2)
   053E B5*0D 02           1077 	cjne	a,(_i + 2),00103$
   0541 05*0E              1078 	inc	(_i + 3)
   0543                    1079 00103$:
   0543 D0 D0              1080 	pop	psw
   0545 D0 E0              1081 	pop	acc
   0547 32                 1082 	reti
                           1083 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1084 ;	eliminated unneeded push/pop dpl
                           1085 ;	eliminated unneeded push/pop dph
                           1086 ;	eliminated unneeded push/pop b
                           1087 	.area CSEG    (CODE)
                           1088 	.area CONST   (CODE)
   0000                    1089 _display_seg:
   0000 C0                 1090 	.db #0xC0	; 192
   0001 F9                 1091 	.db #0xF9	; 249
   0002 A4                 1092 	.db #0xA4	; 164
   0003 B0                 1093 	.db #0xB0	; 176
   0004 99                 1094 	.db #0x99	; 153
   0005 92                 1095 	.db #0x92	; 146
   0006 82                 1096 	.db #0x82	; 130
   0007 F8                 1097 	.db #0xF8	; 248
   0008 80                 1098 	.db #0x80	; 128
   0009 90                 1099 	.db #0x90	; 144
   000A 7F                 1100 	.db #0x7F	; 127
   000B                    1101 _seg_position:
   000B FE                 1102 	.db #0xFE	; 254
   000C FD                 1103 	.db #0xFD	; 253
   000D FB                 1104 	.db #0xFB	; 251
   000E F7                 1105 	.db #0xF7	; 247
   000F F0                 1106 	.db #0xF0	; 240
                           1107 	.area XINIT   (CODE)
                           1108 	.area CABS    (ABS,CODE)
