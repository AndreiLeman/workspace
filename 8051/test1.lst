                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.1.0 #7066 (Feb 26 2012) (Linux)
                              4 ; This file was generated Sat Dec  1 15:06:17 2012
                              5 ;--------------------------------------------------------
                              6 	.module test1
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _seg_position
                             13 	.globl _display_seg
                             14 	.globl _s
                             15 	.globl _time
                             16 	.globl _t
                             17 	.globl _c
                             18 	.globl _b
                             19 	.globl _main
                             20 	.globl _display
                             21 	.globl _delay
                             22 	.globl _TF2
                             23 	.globl _EXF2
                             24 	.globl _RCLK
                             25 	.globl _TCLK
                             26 	.globl _EXEN2
                             27 	.globl _TR2
                             28 	.globl _C_T2
                             29 	.globl _CP_RL2
                             30 	.globl _T2CON_7
                             31 	.globl _T2CON_6
                             32 	.globl _T2CON_5
                             33 	.globl _T2CON_4
                             34 	.globl _T2CON_3
                             35 	.globl _T2CON_2
                             36 	.globl _T2CON_1
                             37 	.globl _T2CON_0
                             38 	.globl _PT2
                             39 	.globl _ET2
                             40 	.globl _CY
                             41 	.globl _AC
                             42 	.globl _F0
                             43 	.globl _RS1
                             44 	.globl _RS0
                             45 	.globl _OV
                             46 	.globl _F1
                             47 	.globl _P
                             48 	.globl _PS
                             49 	.globl _PT1
                             50 	.globl _PX1
                             51 	.globl _PT0
                             52 	.globl _PX0
                             53 	.globl _RD
                             54 	.globl _WR
                             55 	.globl _T1
                             56 	.globl _T0
                             57 	.globl _INT1
                             58 	.globl _INT0
                             59 	.globl _TXD
                             60 	.globl _RXD
                             61 	.globl _P3_7
                             62 	.globl _P3_6
                             63 	.globl _P3_5
                             64 	.globl _P3_4
                             65 	.globl _P3_3
                             66 	.globl _P3_2
                             67 	.globl _P3_1
                             68 	.globl _P3_0
                             69 	.globl _EA
                             70 	.globl _ES
                             71 	.globl _ET1
                             72 	.globl _EX1
                             73 	.globl _ET0
                             74 	.globl _EX0
                             75 	.globl _P2_7
                             76 	.globl _P2_6
                             77 	.globl _P2_5
                             78 	.globl _P2_4
                             79 	.globl _P2_3
                             80 	.globl _P2_2
                             81 	.globl _P2_1
                             82 	.globl _P2_0
                             83 	.globl _SM0
                             84 	.globl _SM1
                             85 	.globl _SM2
                             86 	.globl _REN
                             87 	.globl _TB8
                             88 	.globl _RB8
                             89 	.globl _TI
                             90 	.globl _RI
                             91 	.globl _P1_7
                             92 	.globl _P1_6
                             93 	.globl _P1_5
                             94 	.globl _P1_4
                             95 	.globl _P1_3
                             96 	.globl _P1_2
                             97 	.globl _P1_1
                             98 	.globl _P1_0
                             99 	.globl _TF1
                            100 	.globl _TR1
                            101 	.globl _TF0
                            102 	.globl _TR0
                            103 	.globl _IE1
                            104 	.globl _IT1
                            105 	.globl _IE0
                            106 	.globl _IT0
                            107 	.globl _P0_7
                            108 	.globl _P0_6
                            109 	.globl _P0_5
                            110 	.globl _P0_4
                            111 	.globl _P0_3
                            112 	.globl _P0_2
                            113 	.globl _P0_1
                            114 	.globl _P0_0
                            115 	.globl _TH2
                            116 	.globl _TL2
                            117 	.globl _RCAP2H
                            118 	.globl _RCAP2L
                            119 	.globl _T2CON
                            120 	.globl _B
                            121 	.globl _ACC
                            122 	.globl _PSW
                            123 	.globl _IP
                            124 	.globl _P3
                            125 	.globl _IE
                            126 	.globl _P2
                            127 	.globl _SBUF
                            128 	.globl _SCON
                            129 	.globl _P1
                            130 	.globl _TH1
                            131 	.globl _TH0
                            132 	.globl _TL1
                            133 	.globl _TL0
                            134 	.globl _TMOD
                            135 	.globl _TCON
                            136 	.globl _PCON
                            137 	.globl _DPH
                            138 	.globl _DPL
                            139 	.globl _SP
                            140 	.globl _P0
                            141 	.globl __c
                            142 	.globl _i
                            143 	.globl _count
                            144 	.globl _t_l
                            145 	.globl _t_h
                            146 ;--------------------------------------------------------
                            147 ; special function registers
                            148 ;--------------------------------------------------------
                            149 	.area RSEG    (ABS,DATA)
   0000                     150 	.org 0x0000
                    0080    151 _P0	=	0x0080
                    0081    152 _SP	=	0x0081
                    0082    153 _DPL	=	0x0082
                    0083    154 _DPH	=	0x0083
                    0087    155 _PCON	=	0x0087
                    0088    156 _TCON	=	0x0088
                    0089    157 _TMOD	=	0x0089
                    008A    158 _TL0	=	0x008a
                    008B    159 _TL1	=	0x008b
                    008C    160 _TH0	=	0x008c
                    008D    161 _TH1	=	0x008d
                    0090    162 _P1	=	0x0090
                    0098    163 _SCON	=	0x0098
                    0099    164 _SBUF	=	0x0099
                    00A0    165 _P2	=	0x00a0
                    00A8    166 _IE	=	0x00a8
                    00B0    167 _P3	=	0x00b0
                    00B8    168 _IP	=	0x00b8
                    00D0    169 _PSW	=	0x00d0
                    00E0    170 _ACC	=	0x00e0
                    00F0    171 _B	=	0x00f0
                    00C8    172 _T2CON	=	0x00c8
                    00CA    173 _RCAP2L	=	0x00ca
                    00CB    174 _RCAP2H	=	0x00cb
                    00CC    175 _TL2	=	0x00cc
                    00CD    176 _TH2	=	0x00cd
                            177 ;--------------------------------------------------------
                            178 ; special function bits
                            179 ;--------------------------------------------------------
                            180 	.area RSEG    (ABS,DATA)
   0000                     181 	.org 0x0000
                    0080    182 _P0_0	=	0x0080
                    0081    183 _P0_1	=	0x0081
                    0082    184 _P0_2	=	0x0082
                    0083    185 _P0_3	=	0x0083
                    0084    186 _P0_4	=	0x0084
                    0085    187 _P0_5	=	0x0085
                    0086    188 _P0_6	=	0x0086
                    0087    189 _P0_7	=	0x0087
                    0088    190 _IT0	=	0x0088
                    0089    191 _IE0	=	0x0089
                    008A    192 _IT1	=	0x008a
                    008B    193 _IE1	=	0x008b
                    008C    194 _TR0	=	0x008c
                    008D    195 _TF0	=	0x008d
                    008E    196 _TR1	=	0x008e
                    008F    197 _TF1	=	0x008f
                    0090    198 _P1_0	=	0x0090
                    0091    199 _P1_1	=	0x0091
                    0092    200 _P1_2	=	0x0092
                    0093    201 _P1_3	=	0x0093
                    0094    202 _P1_4	=	0x0094
                    0095    203 _P1_5	=	0x0095
                    0096    204 _P1_6	=	0x0096
                    0097    205 _P1_7	=	0x0097
                    0098    206 _RI	=	0x0098
                    0099    207 _TI	=	0x0099
                    009A    208 _RB8	=	0x009a
                    009B    209 _TB8	=	0x009b
                    009C    210 _REN	=	0x009c
                    009D    211 _SM2	=	0x009d
                    009E    212 _SM1	=	0x009e
                    009F    213 _SM0	=	0x009f
                    00A0    214 _P2_0	=	0x00a0
                    00A1    215 _P2_1	=	0x00a1
                    00A2    216 _P2_2	=	0x00a2
                    00A3    217 _P2_3	=	0x00a3
                    00A4    218 _P2_4	=	0x00a4
                    00A5    219 _P2_5	=	0x00a5
                    00A6    220 _P2_6	=	0x00a6
                    00A7    221 _P2_7	=	0x00a7
                    00A8    222 _EX0	=	0x00a8
                    00A9    223 _ET0	=	0x00a9
                    00AA    224 _EX1	=	0x00aa
                    00AB    225 _ET1	=	0x00ab
                    00AC    226 _ES	=	0x00ac
                    00AF    227 _EA	=	0x00af
                    00B0    228 _P3_0	=	0x00b0
                    00B1    229 _P3_1	=	0x00b1
                    00B2    230 _P3_2	=	0x00b2
                    00B3    231 _P3_3	=	0x00b3
                    00B4    232 _P3_4	=	0x00b4
                    00B5    233 _P3_5	=	0x00b5
                    00B6    234 _P3_6	=	0x00b6
                    00B7    235 _P3_7	=	0x00b7
                    00B0    236 _RXD	=	0x00b0
                    00B1    237 _TXD	=	0x00b1
                    00B2    238 _INT0	=	0x00b2
                    00B3    239 _INT1	=	0x00b3
                    00B4    240 _T0	=	0x00b4
                    00B5    241 _T1	=	0x00b5
                    00B6    242 _WR	=	0x00b6
                    00B7    243 _RD	=	0x00b7
                    00B8    244 _PX0	=	0x00b8
                    00B9    245 _PT0	=	0x00b9
                    00BA    246 _PX1	=	0x00ba
                    00BB    247 _PT1	=	0x00bb
                    00BC    248 _PS	=	0x00bc
                    00D0    249 _P	=	0x00d0
                    00D1    250 _F1	=	0x00d1
                    00D2    251 _OV	=	0x00d2
                    00D3    252 _RS0	=	0x00d3
                    00D4    253 _RS1	=	0x00d4
                    00D5    254 _F0	=	0x00d5
                    00D6    255 _AC	=	0x00d6
                    00D7    256 _CY	=	0x00d7
                    00AD    257 _ET2	=	0x00ad
                    00BD    258 _PT2	=	0x00bd
                    00C8    259 _T2CON_0	=	0x00c8
                    00C9    260 _T2CON_1	=	0x00c9
                    00CA    261 _T2CON_2	=	0x00ca
                    00CB    262 _T2CON_3	=	0x00cb
                    00CC    263 _T2CON_4	=	0x00cc
                    00CD    264 _T2CON_5	=	0x00cd
                    00CE    265 _T2CON_6	=	0x00ce
                    00CF    266 _T2CON_7	=	0x00cf
                    00C8    267 _CP_RL2	=	0x00c8
                    00C9    268 _C_T2	=	0x00c9
                    00CA    269 _TR2	=	0x00ca
                    00CB    270 _EXEN2	=	0x00cb
                    00CC    271 _TCLK	=	0x00cc
                    00CD    272 _RCLK	=	0x00cd
                    00CE    273 _EXF2	=	0x00ce
                    00CF    274 _TF2	=	0x00cf
                            275 ;--------------------------------------------------------
                            276 ; overlayable register banks
                            277 ;--------------------------------------------------------
                            278 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     279 	.ds 8
                            280 ;--------------------------------------------------------
                            281 ; overlayable bit register bank
                            282 ;--------------------------------------------------------
                            283 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     284 bits:
   0000                     285 	.ds 1
                    8000    286 	b0 = bits[0]
                    8100    287 	b1 = bits[1]
                    8200    288 	b2 = bits[2]
                    8300    289 	b3 = bits[3]
                    8400    290 	b4 = bits[4]
                    8500    291 	b5 = bits[5]
                    8600    292 	b6 = bits[6]
                    8700    293 	b7 = bits[7]
                            294 ;--------------------------------------------------------
                            295 ; internal ram data
                            296 ;--------------------------------------------------------
                            297 	.area DSEG    (DATA)
   0000                     298 _t_h::
   0000                     299 	.ds 1
   0001                     300 _t_l::
   0001                     301 	.ds 1
   0002                     302 _count::
   0002                     303 	.ds 2
   0004                     304 _i::
   0004                     305 	.ds 2
   0006                     306 __c::
   0006                     307 	.ds 2
   0008                     308 _c_sloc0_1_0:
   0008                     309 	.ds 4
                            310 ;--------------------------------------------------------
                            311 ; overlayable items in internal ram 
                            312 ;--------------------------------------------------------
                            313 	.area	OSEG    (OVR,DATA)
                            314 ;--------------------------------------------------------
                            315 ; Stack segment in internal ram 
                            316 ;--------------------------------------------------------
                            317 	.area	SSEG	(DATA)
   0000                     318 __start__stack:
   0000                     319 	.ds	1
                            320 
                            321 ;--------------------------------------------------------
                            322 ; indirectly addressable internal ram data
                            323 ;--------------------------------------------------------
                            324 	.area ISEG    (DATA)
                            325 ;--------------------------------------------------------
                            326 ; absolute internal ram data
                            327 ;--------------------------------------------------------
                            328 	.area IABS    (ABS,DATA)
                            329 	.area IABS    (ABS,DATA)
                            330 ;--------------------------------------------------------
                            331 ; bit data
                            332 ;--------------------------------------------------------
                            333 	.area BSEG    (BIT)
                            334 ;--------------------------------------------------------
                            335 ; paged external ram data
                            336 ;--------------------------------------------------------
                            337 	.area PSEG    (PAG,XDATA)
                            338 ;--------------------------------------------------------
                            339 ; external ram data
                            340 ;--------------------------------------------------------
                            341 	.area XSEG    (XDATA)
                            342 ;--------------------------------------------------------
                            343 ; absolute external ram data
                            344 ;--------------------------------------------------------
                            345 	.area XABS    (ABS,XDATA)
                            346 ;--------------------------------------------------------
                            347 ; external initialized ram data
                            348 ;--------------------------------------------------------
                            349 	.area XISEG   (XDATA)
                            350 	.area HOME    (CODE)
                            351 	.area GSINIT0 (CODE)
                            352 	.area GSINIT1 (CODE)
                            353 	.area GSINIT2 (CODE)
                            354 	.area GSINIT3 (CODE)
                            355 	.area GSINIT4 (CODE)
                            356 	.area GSINIT5 (CODE)
                            357 	.area GSINIT  (CODE)
                            358 	.area GSFINAL (CODE)
                            359 	.area CSEG    (CODE)
                            360 ;--------------------------------------------------------
                            361 ; interrupt vector 
                            362 ;--------------------------------------------------------
                            363 	.area HOME    (CODE)
   0000                     364 __interrupt_vect:
   0000 02s00r00            365 	ljmp	__sdcc_gsinit_startup
   0003 32                  366 	reti
   0004                     367 	.ds	7
   000B 02s01r3C            368 	ljmp	_b
   000E                     369 	.ds	5
   0013 32                  370 	reti
   0014                     371 	.ds	7
   001B 02s01r72            372 	ljmp	_c
                            373 ;--------------------------------------------------------
                            374 ; global & static initialisations
                            375 ;--------------------------------------------------------
                            376 	.area HOME    (CODE)
                            377 	.area GSINIT  (CODE)
                            378 	.area GSFINAL (CODE)
                            379 	.area GSINIT  (CODE)
                            380 	.globl __sdcc_gsinit_startup
                            381 	.globl __sdcc_program_startup
                            382 	.globl __start__stack
                            383 	.globl __mcs51_genXINIT
                            384 	.globl __mcs51_genXRAMCLEAR
                            385 	.globl __mcs51_genRAMCLEAR
                            386 ;	test1.c:31: int count=29;//33;
   0000 75*02 1D            387 	mov	_count,#0x1D
   0003 75*03 00            388 	mov	(_count + 1),#0x00
                            389 	.area GSFINAL (CODE)
   0000 02s00r1E            390 	ljmp	__sdcc_program_startup
                            391 ;--------------------------------------------------------
                            392 ; Home
                            393 ;--------------------------------------------------------
                            394 	.area HOME    (CODE)
                            395 	.area HOME    (CODE)
   001E                     396 __sdcc_program_startup:
   001E 12s00rEF            397 	lcall	_main
                            398 ;	return from main will lock up
   0021 80 FE               399 	sjmp .
                            400 ;--------------------------------------------------------
                            401 ; code
                            402 ;--------------------------------------------------------
                            403 	.area CSEG    (CODE)
                            404 ;------------------------------------------------------------
                            405 ;Allocation info for local variables in function 'delay'
                            406 ;------------------------------------------------------------
                            407 ;i                         Allocated to registers r6 r7 
                            408 ;a                         Allocated to registers r4 r5 
                            409 ;b                         Allocated to registers r2 r3 
                            410 ;------------------------------------------------------------
                            411 ;	test1.c:2: void delay(int i)
                            412 ;	-----------------------------------------
                            413 ;	 function delay
                            414 ;	-----------------------------------------
   0000                     415 _delay:
                    0007    416 	ar7 = 0x07
                    0006    417 	ar6 = 0x06
                    0005    418 	ar5 = 0x05
                    0004    419 	ar4 = 0x04
                    0003    420 	ar3 = 0x03
                    0002    421 	ar2 = 0x02
                    0001    422 	ar1 = 0x01
                    0000    423 	ar0 = 0x00
   0000 AE 82               424 	mov	r6,dpl
   0002 AF 83               425 	mov	r7,dph
                            426 ;	test1.c:5: for(a=0;a<i;a++)
   0004 7C 00               427 	mov	r4,#0x00
   0006 7D 00               428 	mov	r5,#0x00
   0008                     429 00104$:
   0008 C3                  430 	clr	c
   0009 EC                  431 	mov	a,r4
   000A 9E                  432 	subb	a,r6
   000B ED                  433 	mov	a,r5
   000C 64 80               434 	xrl	a,#0x80
   000E 8F F0               435 	mov	b,r7
   0010 63 F0 80            436 	xrl	b,#0x80
   0013 95 F0               437 	subb	a,b
   0015 50 14               438 	jnc	00108$
                            439 ;	test1.c:7: for(b=0;b<120;b++);
   0017 7A 78               440 	mov	r2,#0x78
   0019 7B 00               441 	mov	r3,#0x00
   001B                     442 00103$:
   001B 1A                  443 	dec	r2
   001C BA FF 01            444 	cjne	r2,#0xFF,00117$
   001F 1B                  445 	dec	r3
   0020                     446 00117$:
   0020 EA                  447 	mov	a,r2
   0021 4B                  448 	orl	a,r3
   0022 70 F7               449 	jnz	00103$
                            450 ;	test1.c:5: for(a=0;a<i;a++)
   0024 0C                  451 	inc	r4
   0025 BC 00 E0            452 	cjne	r4,#0x00,00104$
   0028 0D                  453 	inc	r5
   0029 80 DD               454 	sjmp	00104$
   002B                     455 00108$:
   002B 22                  456 	ret
                            457 ;------------------------------------------------------------
                            458 ;Allocation info for local variables in function 'display'
                            459 ;------------------------------------------------------------
                            460 ;i                         Allocated to registers r6 r7 
                            461 ;------------------------------------------------------------
                            462 ;	test1.c:36: void display(int i)
                            463 ;	-----------------------------------------
                            464 ;	 function display
                            465 ;	-----------------------------------------
   002C                     466 _display:
   002C AE 82               467 	mov	r6,dpl
   002E AF 83               468 	mov	r7,dph
                            469 ;	test1.c:46: P0=255;
   0030 75 80 FF            470 	mov	_P0,#0xFF
                            471 ;	test1.c:47: P2 = seg_position[2];
   0033 90s00r84            472 	mov	dptr,#(_seg_position + 0x0002)
   0036 E4                  473 	clr	a
   0037 93                  474 	movc	a,@a+dptr
   0038 F5 A0               475 	mov	_P2,a
                            476 ;	test1.c:48: P0=display_seg[i%1000/100];
   003A 75*00 E8            477 	mov	__modsint_PARM_2,#0xE8
   003D 75*01 03            478 	mov	(__modsint_PARM_2 + 1),#0x03
   0040 8E 82               479 	mov	dpl,r6
   0042 8F 83               480 	mov	dph,r7
   0044 C0 07               481 	push	ar7
   0046 C0 06               482 	push	ar6
   0048 12s00r00            483 	lcall	__modsint
   004B 75*00 64            484 	mov	__divsint_PARM_2,#0x64
   004E 75*01 00            485 	mov	(__divsint_PARM_2 + 1),#0x00
   0051 12s00r00            486 	lcall	__divsint
   0054 AC 82               487 	mov	r4,dpl
   0056 AD 83               488 	mov	r5,dph
   0058 D0 06               489 	pop	ar6
   005A D0 07               490 	pop	ar7
   005C EC                  491 	mov	a,r4
   005D 24r77               492 	add	a,#_display_seg
   005F F5 82               493 	mov	dpl,a
   0061 ED                  494 	mov	a,r5
   0062 34s00               495 	addc	a,#(_display_seg >> 8)
   0064 F5 83               496 	mov	dph,a
   0066 E4                  497 	clr	a
   0067 93                  498 	movc	a,@a+dptr
   0068 F5 80               499 	mov	_P0,a
                            500 ;	test1.c:49: delay(2);
   006A 90 00 02            501 	mov	dptr,#0x0002
   006D C0 07               502 	push	ar7
   006F C0 06               503 	push	ar6
   0071 12s00r00            504 	lcall	_delay
   0074 D0 06               505 	pop	ar6
   0076 D0 07               506 	pop	ar7
                            507 ;	test1.c:50: P0=255;
   0078 75 80 FF            508 	mov	_P0,#0xFF
                            509 ;	test1.c:51: P2 = seg_position[1];
   007B 90s00r83            510 	mov	dptr,#(_seg_position + 0x0001)
   007E E4                  511 	clr	a
   007F 93                  512 	movc	a,@a+dptr
   0080 F5 A0               513 	mov	_P2,a
                            514 ;	test1.c:52: P0=display_seg[i%100/10];
   0082 75*00 64            515 	mov	__modsint_PARM_2,#0x64
   0085 75*01 00            516 	mov	(__modsint_PARM_2 + 1),#0x00
   0088 8E 82               517 	mov	dpl,r6
   008A 8F 83               518 	mov	dph,r7
   008C C0 07               519 	push	ar7
   008E C0 06               520 	push	ar6
   0090 12s00r00            521 	lcall	__modsint
   0093 75*00 0A            522 	mov	__divsint_PARM_2,#0x0A
   0096 75*01 00            523 	mov	(__divsint_PARM_2 + 1),#0x00
   0099 12s00r00            524 	lcall	__divsint
   009C AC 82               525 	mov	r4,dpl
   009E AD 83               526 	mov	r5,dph
   00A0 D0 06               527 	pop	ar6
   00A2 D0 07               528 	pop	ar7
   00A4 EC                  529 	mov	a,r4
   00A5 24r77               530 	add	a,#_display_seg
   00A7 F5 82               531 	mov	dpl,a
   00A9 ED                  532 	mov	a,r5
   00AA 34s00               533 	addc	a,#(_display_seg >> 8)
   00AC F5 83               534 	mov	dph,a
   00AE E4                  535 	clr	a
   00AF 93                  536 	movc	a,@a+dptr
   00B0 F5 80               537 	mov	_P0,a
                            538 ;	test1.c:53: delay(2);
   00B2 90 00 02            539 	mov	dptr,#0x0002
   00B5 C0 07               540 	push	ar7
   00B7 C0 06               541 	push	ar6
   00B9 12s00r00            542 	lcall	_delay
   00BC D0 06               543 	pop	ar6
   00BE D0 07               544 	pop	ar7
                            545 ;	test1.c:54: P0=255;
   00C0 75 80 FF            546 	mov	_P0,#0xFF
                            547 ;	test1.c:55: P2 = seg_position[0];
   00C3 90s00r82            548 	mov	dptr,#_seg_position
   00C6 E4                  549 	clr	a
   00C7 93                  550 	movc	a,@a+dptr
   00C8 F5 A0               551 	mov	_P2,a
                            552 ;	test1.c:56: P0=display_seg[i%10];
   00CA 75*00 0A            553 	mov	__modsint_PARM_2,#0x0A
   00CD 75*01 00            554 	mov	(__modsint_PARM_2 + 1),#0x00
   00D0 8E 82               555 	mov	dpl,r6
   00D2 8F 83               556 	mov	dph,r7
   00D4 12s00r00            557 	lcall	__modsint
   00D7 AE 82               558 	mov	r6,dpl
   00D9 AF 83               559 	mov	r7,dph
   00DB EE                  560 	mov	a,r6
   00DC 24r77               561 	add	a,#_display_seg
   00DE F5 82               562 	mov	dpl,a
   00E0 EF                  563 	mov	a,r7
   00E1 34s00               564 	addc	a,#(_display_seg >> 8)
   00E3 F5 83               565 	mov	dph,a
   00E5 E4                  566 	clr	a
   00E6 93                  567 	movc	a,@a+dptr
   00E7 F5 80               568 	mov	_P0,a
                            569 ;	test1.c:57: delay(2);
   00E9 90 00 02            570 	mov	dptr,#0x0002
   00EC 02s00r00            571 	ljmp	_delay
                            572 ;------------------------------------------------------------
                            573 ;Allocation info for local variables in function 'main'
                            574 ;------------------------------------------------------------
                            575 ;	test1.c:63: main()
                            576 ;	-----------------------------------------
                            577 ;	 function main
                            578 ;	-----------------------------------------
   00EF                     579 _main:
                            580 ;	test1.c:70: IE=0x8a;
   00EF 75 A8 8A            581 	mov	_IE,#0x8A
                            582 ;	test1.c:71: TMOD=0x11;
   00F2 75 89 11            583 	mov	_TMOD,#0x11
                            584 ;	test1.c:119: set_bit(P2,4,0);
   00F5 AF A0               585 	mov	r7,_P2
   00F7 53 07 EF            586 	anl	ar7,#0xEF
   00FA 8F A0               587 	mov	_P2,r7
                            588 ;	test1.c:126: i=0;
                            589 ;	test1.c:127: _c=0;
   00FC E4                  590 	clr	a
   00FD F5*04               591 	mov	_i,a
   00FF F5*05               592 	mov	(_i + 1),a
   0101 F5*06               593 	mov	__c,a
   0103 F5*07               594 	mov	(__c + 1),a
                            595 ;	test1.c:128: TH1=(65536-50000)/256;
   0105 75 8D 3C            596 	mov	_TH1,#0x3C
                            597 ;	test1.c:129: TL1=(65536-50000)%256;
   0108 75 8B B0            598 	mov	_TL1,#0xB0
                            599 ;	test1.c:130: TR1=1;
   010B D2 8E               600 	setb	_TR1
                            601 ;	test1.c:131: while(1)
   010D                     602 00102$:
                            603 ;	test1.c:133: display(i);
   010D 85*04 82            604 	mov	dpl,_i
   0110 85*05 83            605 	mov	dph,(_i + 1)
   0113 12s00r2C            606 	lcall	_display
                            607 ;	test1.c:134: i++;
   0116 05*04               608 	inc	_i
   0118 E4                  609 	clr	a
   0119 B5*04 02            610 	cjne	a,_i,00110$
   011C 05*05               611 	inc	(_i + 1)
   011E                     612 00110$:
                            613 ;	test1.c:135: set_bit(P2,4,!get_bit(P2,4));
   011E 74 10               614 	mov	a,#0x10
   0120 55 A0               615 	anl	a,_P2
   0122 FF                  616 	mov	r7,a
   0123 B4 01 00            617 	cjne	a,#0x01,00111$
   0126                     618 00111$:
   0126 E4                  619 	clr	a
   0127 33                  620 	rlc	a
   0128 FF                  621 	mov	r7,a
   0129 60 07               622 	jz	00106$
   012B 74 10               623 	mov	a,#0x10
   012D 45 A0               624 	orl	a,_P2
   012F FF                  625 	mov	r7,a
   0130 80 06               626 	sjmp	00107$
   0132                     627 00106$:
   0132 AE A0               628 	mov	r6,_P2
   0134 74 EF               629 	mov	a,#0xEF
   0136 5E                  630 	anl	a,r6
   0137 FF                  631 	mov	r7,a
   0138                     632 00107$:
   0138 8F A0               633 	mov	_P2,r7
   013A 80 D1               634 	sjmp	00102$
                            635 ;------------------------------------------------------------
                            636 ;Allocation info for local variables in function 'b'
                            637 ;------------------------------------------------------------
                            638 ;	test1.c:160: void b(void) interrupt 1
                            639 ;	-----------------------------------------
                            640 ;	 function b
                            641 ;	-----------------------------------------
   013C                     642 _b:
   013C C0 E0               643 	push	acc
   013E C0 07               644 	push	ar7
   0140 C0 06               645 	push	ar6
   0142 C0 D0               646 	push	psw
   0144 75 D0 00            647 	mov	psw,#0x00
                            648 ;	test1.c:163: set_bit(P2,4,!get_bit(P2,4));
   0147 74 10               649 	mov	a,#0x10
   0149 55 A0               650 	anl	a,_P2
   014B FF                  651 	mov	r7,a
   014C B4 01 00            652 	cjne	a,#0x01,00106$
   014F                     653 00106$:
   014F E4                  654 	clr	a
   0150 33                  655 	rlc	a
   0151 FF                  656 	mov	r7,a
   0152 60 07               657 	jz	00103$
   0154 74 10               658 	mov	a,#0x10
   0156 45 A0               659 	orl	a,_P2
   0158 FF                  660 	mov	r7,a
   0159 80 06               661 	sjmp	00104$
   015B                     662 00103$:
   015B AE A0               663 	mov	r6,_P2
   015D 74 EF               664 	mov	a,#0xEF
   015F 5E                  665 	anl	a,r6
   0160 FF                  666 	mov	r7,a
   0161                     667 00104$:
   0161 8F A0               668 	mov	_P2,r7
                            669 ;	test1.c:164: TH0=t_h;
   0163 85*00 8C            670 	mov	_TH0,_t_h
                            671 ;	test1.c:165: TL0=t_l;
   0166 85*01 8A            672 	mov	_TL0,_t_l
   0169 D0 D0               673 	pop	psw
   016B D0 06               674 	pop	ar6
   016D D0 07               675 	pop	ar7
   016F D0 E0               676 	pop	acc
   0171 32                  677 	reti
                            678 ;	eliminated unneeded push/pop dpl
                            679 ;	eliminated unneeded push/pop dph
                            680 ;	eliminated unneeded push/pop b
                            681 ;------------------------------------------------------------
                            682 ;Allocation info for local variables in function 'c'
                            683 ;------------------------------------------------------------
                            684 ;sloc0                     Allocated with name '_c_sloc0_1_0'
                            685 ;------------------------------------------------------------
                            686 ;	test1.c:169: void c(void) interrupt 3
                            687 ;	-----------------------------------------
                            688 ;	 function c
                            689 ;	-----------------------------------------
   0172                     690 _c:
   0172 C0*00               691 	push	bits
   0174 C0 E0               692 	push	acc
   0176 C0 F0               693 	push	b
   0178 C0 82               694 	push	dpl
   017A C0 83               695 	push	dph
   017C C0 07               696 	push	(0+7)
   017E C0 06               697 	push	(0+6)
   0180 C0 05               698 	push	(0+5)
   0182 C0 04               699 	push	(0+4)
   0184 C0 03               700 	push	(0+3)
   0186 C0 02               701 	push	(0+2)
   0188 C0 01               702 	push	(0+1)
   018A C0 00               703 	push	(0+0)
   018C C0 D0               704 	push	psw
   018E 75 D0 00            705 	mov	psw,#0x00
                            706 ;	test1.c:171: TH1=(65536-50000)/256;
   0191 75 8D 3C            707 	mov	_TH1,#0x3C
                            708 ;	test1.c:172: TL1=(65536-50000)%256;
   0194 75 8B B0            709 	mov	_TL1,#0xB0
                            710 ;	test1.c:173: _c+=50;
   0197 74 32               711 	mov	a,#0x32
   0199 25*06               712 	add	a,__c
   019B F5*06               713 	mov	__c,a
   019D E4                  714 	clr	a
   019E 35*07               715 	addc	a,(__c + 1)
   01A0 F5*07               716 	mov	(__c + 1),a
                            717 ;	test1.c:175: if(_c<time[i])return;
   01A2 E5*04               718 	mov	a,_i
   01A4 25*04               719 	add	a,_i
   01A6 FE                  720 	mov	r6,a
   01A7 E5*05               721 	mov	a,(_i + 1)
   01A9 33                  722 	rlc	a
   01AA FF                  723 	mov	r7,a
   01AB EE                  724 	mov	a,r6
   01AC 24r18               725 	add	a,#_time
   01AE F5 82               726 	mov	dpl,a
   01B0 EF                  727 	mov	a,r7
   01B1 34s00               728 	addc	a,#(_time >> 8)
   01B3 F5 83               729 	mov	dph,a
   01B5 E4                  730 	clr	a
   01B6 93                  731 	movc	a,@a+dptr
   01B7 FE                  732 	mov	r6,a
   01B8 A3                  733 	inc	dptr
   01B9 E4                  734 	clr	a
   01BA 93                  735 	movc	a,@a+dptr
   01BB FF                  736 	mov	r7,a
   01BC AC*06               737 	mov	r4,__c
   01BE AD*07               738 	mov	r5,(__c + 1)
   01C0 C3                  739 	clr	c
   01C1 EC                  740 	mov	a,r4
   01C2 9E                  741 	subb	a,r6
   01C3 ED                  742 	mov	a,r5
   01C4 9F                  743 	subb	a,r7
   01C5 50 03               744 	jnc	00102$
   01C7 02s02r6D            745 	ljmp	00109$
   01CA                     746 00102$:
                            747 ;	test1.c:176: _c=0;
   01CA E4                  748 	clr	a
   01CB F5*06               749 	mov	__c,a
   01CD F5*07               750 	mov	(__c + 1),a
                            751 ;	test1.c:177: if(s[i]==0)TR0=0;
   01CF E5*04               752 	mov	a,_i
   01D1 24r5A               753 	add	a,#_s
   01D3 F5 82               754 	mov	dpl,a
   01D5 E5*05               755 	mov	a,(_i + 1)
   01D7 34s00               756 	addc	a,#(_s >> 8)
   01D9 F5 83               757 	mov	dph,a
   01DB E4                  758 	clr	a
   01DC 93                  759 	movc	a,@a+dptr
   01DD FF                  760 	mov	r7,a
   01DE 70 02               761 	jnz	00104$
   01E0 C2 8C               762 	clr	_TR0
   01E2                     763 00104$:
                            764 ;	test1.c:178: t_h=(65536-(t[s[i]]))/256;
   01E2 EF                  765 	mov	a,r7
   01E3 2F                  766 	add	a,r7
   01E4 FD                  767 	mov	r5,a
   01E5 90s00r00            768 	mov	dptr,#_t
   01E8 93                  769 	movc	a,@a+dptr
   01E9 CD                  770 	xch	a,r5
   01EA A3                  771 	inc	dptr
   01EB 93                  772 	movc	a,@a+dptr
   01EC FE                  773 	mov	r6,a
   01ED E4                  774 	clr	a
   01EE FC                  775 	mov	r4,a
   01EF FB                  776 	mov	r3,a
   01F0 C3                  777 	clr	c
   01F1 9D                  778 	subb	a,r5
   01F2 F5*08               779 	mov	_c_sloc0_1_0,a
   01F4 E4                  780 	clr	a
   01F5 9E                  781 	subb	a,r6
   01F6 F5*09               782 	mov	(_c_sloc0_1_0 + 1),a
   01F8 74 01               783 	mov	a,#0x01
   01FA 9C                  784 	subb	a,r4
   01FB F5*0A               785 	mov	(_c_sloc0_1_0 + 2),a
   01FD E4                  786 	clr	a
   01FE 9B                  787 	subb	a,r3
   01FF F5*0B               788 	mov	(_c_sloc0_1_0 + 3),a
   0201 E4                  789 	clr	a
   0202 F5*00               790 	mov	__divslong_PARM_2,a
   0204 75*01 01            791 	mov	(__divslong_PARM_2 + 1),#0x01
   0207 F5*02               792 	mov	(__divslong_PARM_2 + 2),a
   0209 F5*03               793 	mov	(__divslong_PARM_2 + 3),a
   020B 85*08 82            794 	mov	dpl,_c_sloc0_1_0
   020E 85*09 83            795 	mov	dph,(_c_sloc0_1_0 + 1)
   0211 85*0A F0            796 	mov	b,(_c_sloc0_1_0 + 2)
   0214 E5*0B               797 	mov	a,(_c_sloc0_1_0 + 3)
   0216 C0 07               798 	push	ar7
   0218 12s00r00            799 	lcall	__divslong
   021B A8 82               800 	mov	r0,dpl
   021D 88*00               801 	mov	_t_h,r0
                            802 ;	test1.c:179: t_l=(65536-(t[s[i]]))%256;
   021F E4                  803 	clr	a
   0220 F5*00               804 	mov	__modslong_PARM_2,a
   0222 75*01 01            805 	mov	(__modslong_PARM_2 + 1),#0x01
   0225 F5*02               806 	mov	(__modslong_PARM_2 + 2),a
   0227 F5*03               807 	mov	(__modslong_PARM_2 + 3),a
   0229 85*08 82            808 	mov	dpl,_c_sloc0_1_0
   022C 85*09 83            809 	mov	dph,(_c_sloc0_1_0 + 1)
   022F 85*0A F0            810 	mov	b,(_c_sloc0_1_0 + 2)
   0232 E5*0B               811 	mov	a,(_c_sloc0_1_0 + 3)
   0234 12s00r00            812 	lcall	__modslong
   0237 AB 82               813 	mov	r3,dpl
   0239 AC 83               814 	mov	r4,dph
   023B AD F0               815 	mov	r5,b
   023D FE                  816 	mov	r6,a
   023E D0 07               817 	pop	ar7
   0240 8B*01               818 	mov	_t_l,r3
                            819 ;	test1.c:180: TH0=t_h;
   0242 85*00 8C            820 	mov	_TH0,_t_h
                            821 ;	test1.c:181: TL0=t_l;
   0245 85*01 8A            822 	mov	_TL0,_t_l
                            823 ;	test1.c:182: if(s[i]!=0)TR0=1;
   0248 EF                  824 	mov	a,r7
   0249 60 02               825 	jz	00106$
   024B D2 8C               826 	setb	_TR0
   024D                     827 00106$:
                            828 ;	test1.c:185: i+=1;
   024D 05*04               829 	inc	_i
   024F E4                  830 	clr	a
   0250 B5*04 02            831 	cjne	a,_i,00118$
   0253 05*05               832 	inc	(_i + 1)
   0255                     833 00118$:
                            834 ;	test1.c:186: if(i>=count)i=0;
   0255 C3                  835 	clr	c
   0256 E5*04               836 	mov	a,_i
   0258 95*02               837 	subb	a,_count
   025A E5*05               838 	mov	a,(_i + 1)
   025C 64 80               839 	xrl	a,#0x80
   025E 85*03 F0            840 	mov	b,(_count + 1)
   0261 63 F0 80            841 	xrl	b,#0x80
   0264 95 F0               842 	subb	a,b
   0266 40 05               843 	jc	00109$
   0268 E4                  844 	clr	a
   0269 F5*04               845 	mov	_i,a
   026B F5*05               846 	mov	(_i + 1),a
   026D                     847 00109$:
   026D D0 D0               848 	pop	psw
   026F D0 00               849 	pop	(0+0)
   0271 D0 01               850 	pop	(0+1)
   0273 D0 02               851 	pop	(0+2)
   0275 D0 03               852 	pop	(0+3)
   0277 D0 04               853 	pop	(0+4)
   0279 D0 05               854 	pop	(0+5)
   027B D0 06               855 	pop	(0+6)
   027D D0 07               856 	pop	(0+7)
   027F D0 83               857 	pop	dph
   0281 D0 82               858 	pop	dpl
   0283 D0 F0               859 	pop	b
   0285 D0 E0               860 	pop	acc
   0287 D0*00               861 	pop	bits
   0289 32                  862 	reti
                            863 	.area CSEG    (CODE)
                            864 	.area CONST   (CODE)
   0000                     865 _t:
   0000 00 00               866 	.byte #0x00,#0x00	; 0
   0002 BC 03               867 	.byte #0xBC,#0x03	; 956
   0004 54 03               868 	.byte #0x54,#0x03	; 852
   0006 F7 02               869 	.byte #0xF7,#0x02	; 759
   0008 CC 02               870 	.byte #0xCC,#0x02	; 716
   000A 7E 02               871 	.byte #0x7E,#0x02	; 638
   000C 38 02               872 	.byte #0x38,#0x02	; 568
   000E FA 01               873 	.byte #0xFA,#0x01	; 506
   0010 DE 01               874 	.byte #0xDE,#0x01	; 478
   0012 AA 01               875 	.byte #0xAA,#0x01	; 426
   0014 7B 01               876 	.byte #0x7B,#0x01	; 379
   0016 00 00               877 	.byte #0x00,#0x00	; 0
   0018                     878 _time:
   0018 F4 01               879 	.byte #0xF4,#0x01	; 500
   001A F4 01               880 	.byte #0xF4,#0x01	; 500
   001C F4 01               881 	.byte #0xF4,#0x01	; 500
   001E F4 01               882 	.byte #0xF4,#0x01	; 500
   0020 F4 01               883 	.byte #0xF4,#0x01	; 500
   0022 F4 01               884 	.byte #0xF4,#0x01	; 500
   0024 F4 01               885 	.byte #0xF4,#0x01	; 500
   0026 F4 01               886 	.byte #0xF4,#0x01	; 500
   0028 F4 01               887 	.byte #0xF4,#0x01	; 500
   002A F4 01               888 	.byte #0xF4,#0x01	; 500
   002C F4 01               889 	.byte #0xF4,#0x01	; 500
   002E F4 01               890 	.byte #0xF4,#0x01	; 500
   0030 F4 01               891 	.byte #0xF4,#0x01	; 500
   0032 F4 01               892 	.byte #0xF4,#0x01	; 500
   0034 F4 01               893 	.byte #0xF4,#0x01	; 500
   0036 F4 01               894 	.byte #0xF4,#0x01	; 500
   0038 F4 01               895 	.byte #0xF4,#0x01	; 500
   003A F4 01               896 	.byte #0xF4,#0x01	; 500
   003C F4 01               897 	.byte #0xF4,#0x01	; 500
   003E F4 01               898 	.byte #0xF4,#0x01	; 500
   0040 F4 01               899 	.byte #0xF4,#0x01	; 500
   0042 F4 01               900 	.byte #0xF4,#0x01	; 500
   0044 F4 01               901 	.byte #0xF4,#0x01	; 500
   0046 F4 01               902 	.byte #0xF4,#0x01	; 500
   0048 F4 01               903 	.byte #0xF4,#0x01	; 500
   004A F4 01               904 	.byte #0xF4,#0x01	; 500
   004C F4 01               905 	.byte #0xF4,#0x01	; 500
   004E F4 01               906 	.byte #0xF4,#0x01	; 500
   0050 F4 01               907 	.byte #0xF4,#0x01	; 500
   0052 F4 01               908 	.byte #0xF4,#0x01	; 500
   0054 F4 01               909 	.byte #0xF4,#0x01	; 500
   0056 F4 01               910 	.byte #0xF4,#0x01	; 500
   0058 F4 01               911 	.byte #0xF4,#0x01	; 500
   005A                     912 _s:
   005A 01                  913 	.db #0x01	; 1
   005B 01                  914 	.db #0x01	; 1
   005C 02                  915 	.db #0x02	; 2
   005D 01                  916 	.db #0x01	; 1
   005E 04                  917 	.db #0x04	; 4
   005F 03                  918 	.db #0x03	; 3
   0060 00                  919 	.db #0x00	; 0
   0061 01                  920 	.db #0x01	; 1
   0062 01                  921 	.db #0x01	; 1
   0063 02                  922 	.db #0x02	; 2
   0064 01                  923 	.db #0x01	; 1
   0065 05                  924 	.db #0x05	; 5
   0066 04                  925 	.db #0x04	; 4
   0067 00                  926 	.db #0x00	; 0
   0068 01                  927 	.db #0x01	; 1
   0069 01                  928 	.db #0x01	; 1
   006A 08                  929 	.db #0x08	; 8
   006B 06                  930 	.db #0x06	; 6
   006C 04                  931 	.db #0x04	; 4
   006D 03                  932 	.db #0x03	; 3
   006E 02                  933 	.db #0x02	; 2
   006F 00                  934 	.db #0x00	; 0
   0070 07                  935 	.db #0x07	; 7
   0071 07                  936 	.db #0x07	; 7
   0072 06                  937 	.db #0x06	; 6
   0073 04                  938 	.db #0x04	; 4
   0074 05                  939 	.db #0x05	; 5
   0075 04                  940 	.db #0x04	; 4
   0076 00                  941 	.db #0x00	; 0
   0077                     942 _display_seg:
   0077 C0                  943 	.db #0xC0	; 192
   0078 F9                  944 	.db #0xF9	; 249
   0079 A4                  945 	.db #0xA4	; 164
   007A B0                  946 	.db #0xB0	; 176
   007B 99                  947 	.db #0x99	; 153
   007C 92                  948 	.db #0x92	; 146
   007D 82                  949 	.db #0x82	; 130
   007E F8                  950 	.db #0xF8	; 248
   007F 80                  951 	.db #0x80	; 128
   0080 90                  952 	.db #0x90	; 144
   0081 7F                  953 	.db #0x7F	; 127
   0082                     954 _seg_position:
   0082 06                  955 	.db #0x06	; 6
   0083 05                  956 	.db #0x05	; 5
   0084 03                  957 	.db #0x03	; 3
   0085 07                  958 	.db #0x07	; 7
   0086 00                  959 	.db #0x00	; 0
                            960 	.area XINIT   (CODE)
                            961 	.area CABS    (ABS,CODE)
